<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scrolls on robonovotny</title>
    <link>http://novotnyr.github.io/scrolls/</link>
    <description>Recent content in Scrolls on robonovotny</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 08 Jul 2019 09:09:39 +0100</lastBuildDate>
    
	<atom:link href="http://novotnyr.github.io/scrolls/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Korutiny v Kotline</title>
      <link>http://novotnyr.github.io/scrolls/korutiny-v-kotline/</link>
      <pubDate>Mon, 08 Jul 2019 09:09:39 +0100</pubDate>
      
      <guid>http://novotnyr.github.io/scrolls/korutiny-v-kotline/</guid>
      <description>Korutiny v Kotline V bežnej Jave sa spúšťanie úloh na pozadí (teda paralelný beh úloh) dá dosiahnuť pomocou vlákien (threads). Tento mechanizmus však môže byť natoľko komplikovaný, že zaberie pol semestra vysvetľovania.
Kotlin ponúka alternatívu: korutiny / coroutines, ktoré majú viacero výhod:
 elegantný zápis vďaka kombinácii syntaxe Kotlinu a knižnice pre korutiny sú škálovateľné: poľahky si môžeme pustiť státisíce korutín využívajú neblokujúcu filozofiu: keďže sa takmer nikde na nič nečaká, získame nesmierny výkon podporujú skladanie korutín cez štruktúrovanú konkurentnosť (structured concurrency).</description>
    </item>
    
    <item>
      <title>Mriežky v Androide cez GridLayout</title>
      <link>http://novotnyr.github.io/scrolls/mriezky-v-androide-cez-gridlayout/</link>
      <pubDate>Wed, 20 Feb 2019 09:09:39 +0100</pubDate>
      
      <guid>http://novotnyr.github.io/scrolls/mriezky-v-androide-cez-gridlayout/</guid>
      <description>Vlastné piškvorky v Androide si vyžadujú mriežku 3 x 3, ktorá zaberá celú obrazovku. Ako na to v Androide?
Máme viacero možnosti:
 GridView: starý dobrý widget, ktorý zobrazí dáta z adaptéra v mriežke. Problémy? Neráta s tým, že widgety sa trafia “presne” do veľkosti obrazovky. Buď ich je málo a dole ostane vzduch, alebo priveľa a potom budeme scrollovať. Ale my nechceme scrollovateľné piškvorky. GridLayout: layout od čias API 14 (4.</description>
    </item>
    
    <item>
      <title>Nahrádzanie premenných v stringu v Springu</title>
      <link>http://novotnyr.github.io/scrolls/nahradzanie-premennych-v-retazci-v-springu/</link>
      <pubDate>Sun, 10 Feb 2019 14:06:56 +0100</pubDate>
      
      <guid>http://novotnyr.github.io/scrolls/nahradzanie-premennych-v-retazci-v-springu/</guid>
      <description>Spring má geniálne vymyslený systém properties, kde možno ukladať rozličné konfiguračné nastavenia v prostredí (Environment) a robiť s tým kdejaké finty. Čo keď však potrebujeme úplne hlúpu vec: nahradiť premenné v reťazci konkrétnymi namapovanými hodnotami?
Zoberme si reťazec:
http://${hostname}/${path}  Zoberme si dve premenné — host s hodnotou localhost a path s hodnotou qofola.
Po nahradení by sme chceli získať krásnu URL:
http://localhost/qofola  Spring! Trieda PropertyPlaceholderHelper síce nemá úplne ideálny názov, ale má dve základné metódy:</description>
    </item>
    
    <item>
      <title>Šesťdesiat vizitiek s ťahákmi k shellu</title>
      <link>http://novotnyr.github.io/scrolls/vizitkar-shellu/</link>
      <pubDate>Sun, 03 Feb 2019 18:56:29 +0100</pubDate>
      
      <guid>http://novotnyr.github.io/scrolls/vizitkar-shellu/</guid>
      <description>TLDR; ťaháky k shellu v tvare vizitiek 9x5cm sú zverejnené na GitHube.
Počas zimného semestra 2018&amp;frasl;2019 bežal na PF UPJŠ kurz Seminár k operačným systémom, kde som vyučoval Powershell a Bash. Na začiatku každého shellového stretnutia som rozdal jeden A4kový handout, kde boli uverejnené syntaktické a príkazové nápovedy, ktoré sa mohli hodiť k danej téme.
Obsah z cvičení som následne preklopil z Wordu do LaTeXu a nasekal do formátu vizitiek 9x5cm.</description>
    </item>
    
    <item>
      <title>Mocking AMQP Integration tests with Apache Qpid</title>
      <link>http://novotnyr.github.io/scrolls/qpid-as-mocking-amqp-broker-for-integration-tests/</link>
      <pubDate>Wed, 23 Jan 2019 19:01:38 +0100</pubDate>
      
      <guid>http://novotnyr.github.io/scrolls/qpid-as-mocking-amqp-broker-for-integration-tests/</guid>
      <description>AMQP protocol is a useful mechanism to tackle cross-component integration features. When running integration tests, sometimes it’s useful to run integration tests without a full-fledged broker at hand. Especially, when RabbitMQ is an Erlang-based binary expected to run besides a Java-powered application.
Let’s use an alternative solution. Apache Qpid is a messaging solution and broker that is implemented in Java. In addition, it supports the following features:
 Supports the AMQP 0.</description>
    </item>
    
    <item>
      <title>Saving Keystrokes with Live Templates in IntelliJ IDEA</title>
      <link>http://novotnyr.github.io/scrolls/saving-keystrokes-with-live-templates-in-intellij-idea/</link>
      <pubDate>Mon, 21 Jan 2019 12:31:44 +0100</pubDate>
      
      <guid>http://novotnyr.github.io/scrolls/saving-keystrokes-with-live-templates-in-intellij-idea/</guid>
      <description>Typing Code Over and Over? In one of the projects, we had to create many customized enumerations. Something like this:
public class Status { ONLINE(&amp;quot;on&amp;quot;), OFFLINE(&amp;quot;off&amp;quot;); }  Each of this enum was supposed to have a findByCode method that would resolve “on” to ONLINE and “off” to offline. Something like this:
public enum Status { ONLINE(&amp;quot;on&amp;quot;), OFFLINE(&amp;quot;off&amp;quot;); private final String code; Status(String code) { this.code = code; } public static Status findByCode(String code) throws IllegalArgumentException { for (Status value : Status.</description>
    </item>
    
    <item>
      <title>Malá čokoládová REST aplikácia (List Milanovi)</title>
      <link>http://novotnyr.github.io/scrolls/mala-cokoladova-rest-aplikacia-list-milanovi/</link>
      <pubDate>Sun, 20 Jan 2019 14:06:56 +0100</pubDate>
      
      <guid>http://novotnyr.github.io/scrolls/mala-cokoladova-rest-aplikacia-list-milanovi/</guid>
      <description>Milý Milan, chcel si vedieť, ako vyzerá minimalistická RESTovská aplikácia postavená na aplikačnom rámci Spring Boot.
Tu je.
Predovšetkým, zíde sa ti Maven. Nielenže sa vysporiada so závislosťami v Springu, ale dá ti k dispozícii fajnový plugin pre Jetty, v ktorom bude spúšťanie servera vecou na 10 znakov.
Závislosti Začni teda POMkom, ktorý oddeď od rodičovského POM súboru a zároveň dodaj závislosť pre podporu webu a modulu Spring Web MVC.</description>
    </item>
    
    <item>
      <title>Enforcing Spring Cloud Contracts Over AMQP</title>
      <link>http://novotnyr.github.io/scrolls/enforcing-spring-cloud-contracts-over-amqp/</link>
      <pubDate>Fri, 18 Jan 2019 09:09:39 +0100</pubDate>
      
      <guid>http://novotnyr.github.io/scrolls/enforcing-spring-cloud-contracts-over-amqp/</guid>
      <description>Why Spring Cloud and CDC? The Spring Cloud Contract enforces Consumer Driven Contracts (CDC) in the services. While there are various examples of the HTTP integration, let’s focus on another scenario — enforcing contracts on messages in the AMQP protocol.
We will create a simple example where a producer will send a user presence message to a consumer. This message will be in the JSON format, send via pre-aggreed exchange.</description>
    </item>
    
    <item>
      <title>Veselice s `xargs`</title>
      <link>http://novotnyr.github.io/scrolls/veselice-s-xargs/</link>
      <pubDate>Sun, 13 Jan 2019 10:20:04 +0100</pubDate>
      
      <guid>http://novotnyr.github.io/scrolls/veselice-s-xargs/</guid>
      <description>Každý druhý článok o xargs sa začína v duchu „&amp;hellip; jedným z najpodceňovanejších príkazov Unixu je&amp;hellip;”. Tento nebude iný.
Mnohokrát sa stáva, že výstupom programu je niekoľko slov oddelených bielym miestom (napr. slová na samostatných riadkoch), ktoré chceme postupne jeden za druhým spracovávať a posielať ako parameter do iného programu. Niečo v duchu:
pre každé slovo R spracuj R  Priamo for cyklus! V shellscriptingu je však for prekérny: vyžaduje totiž podivnú viacriadkovú syntax&amp;hellip; a komu sa chce kvôli jednoduchým jednorazovým veciam zakladať skripty, písať shebangy, chmodovať a patlať sa s editorom.</description>
    </item>
    
    <item>
      <title>Running MongoDB ReplicaSet on localhost</title>
      <link>http://novotnyr.github.io/scrolls/running-mongodb-replicaset-on-localhost/</link>
      <pubDate>Fri, 11 Jan 2019 08:58:04 +0000</pubDate>
      
      <guid>http://novotnyr.github.io/scrolls/running-mongodb-replicaset-on-localhost/</guid>
      <description>Setup Cluster Create Instances Create directories:
mkdir -p /tmp/mongodb/rs-{0,1,2}  In shell, run:
mongod --dbpath /tmp/mongodb/rs-0 --replSet rs --port 27021 --bind_ip localhost --smallfiles --oplogSize 128 mongod --dbpath /tmp/mongodb/rs-1 --replSet rs --port 27022 --bind_ip localhost --smallfiles --oplogSize 128 mongod --dbpath /tmp/mongodb/rs-2 --replSet rs --port 27023 --bind_ip localhost --smallfiles --oplogSize 128 Initiate ReplicaSet Run client to initiate ReplicaSet:
mongo --port 27021 Create ReplicaSet configuration:
rs.initiate({ _id : &amp;#39;rs&amp;#39;, members: [ { _id : 0, host : &amp;#34;localhost:27021&amp;#34; }, { _id : 1, host : &amp;#34;localhost:27022&amp;#34; }, { _id : 2, host : &amp;#34;localhost:27023&amp;#34; } ] })  Review with:</description>
    </item>
    
    <item>
      <title>Tri skvelé tipy pre prácu s konzolou: bat, fzf, up</title>
      <link>http://novotnyr.github.io/scrolls/tri-skvele-tipy-pre-pracu-s-konzolou-bat-fzf-up/</link>
      <pubDate>Wed, 09 Jan 2019 10:20:04 +0100</pubDate>
      
      <guid>http://novotnyr.github.io/scrolls/tri-skvele-tipy-pre-pracu-s-konzolou-bat-fzf-up/</guid>
      <description>Na zimu sa treba zahriať pri termináli! Štyri utility v tom pomôžu:
 bat — ako cat, ale s krídlami. up — interaktívny budovateľ a vyhodnocovateľ rúr, pájp, či kolón fzf — interaktívny fuzzy vyhľadávač všetkého — súborov, procesov a mnohého!  Nástroje sú dostupné pre akýkoľvek linuxoidný operačný systém a pre každý shell.
cat s farbami cat je ako Lada — dokonalý už od začiatku: jednoducho vypľuje dáta z rúry / súboru bez zmeny.</description>
    </item>
    
    <item>
      <title>Tri veci pri práci s adresármi v termináli, ktoré robíte zle</title>
      <link>http://novotnyr.github.io/scrolls/tri-veci-pri-praci-s-adresarmi-ktore-robite-zle-exa-fd-ag/</link>
      <pubDate>Tue, 08 Jan 2019 07:44:08 +0100</pubDate>
      
      <guid>http://novotnyr.github.io/scrolls/tri-veci-pri-praci-s-adresarmi-ktore-robite-zle-exa-fd-ag/</guid>
      <description>Trojica ls, find a grep sa v linuxovom termináli používa každý deň. Nie vždy sú však pohodlné, veď poniektoré nástroje majú azda aj 50 rokov. Ukážme si moderné alternatívy pre nové milénium!
 exa namiesto ls fd namiesto find ag namiesto find / grep  Všetky nástroje fungujú krížom cez linuxové distribúcie i na MacOS.
exa - výpis adresára pre moderných ľudí brew install exa  Príkaz exa je ako ls, ibaže je</description>
    </item>
    
    <item>
      <title>Spracovanie argumentov v shelli cez `getopts`</title>
      <link>http://novotnyr.github.io/scrolls/spracovanie-argumentov-cez-getopts/</link>
      <pubDate>Mon, 07 Jan 2019 07:44:08 +0100</pubDate>
      
      <guid>http://novotnyr.github.io/scrolls/spracovanie-argumentov-cez-getopts/</guid>
      <description>Načo je dobrý getops? getopts je posixový nástroj na spracovávanie prepínačov z príkazového riadka v rámci shellového skriptu. Vezmime si príklad:
./ffind.sh -s -t d java xml Príkaz ffind.sh dostal päť argumentov, ktoré v skutočnosti reprezentujú tri rozličné druhy “vstupov”:
 -s teda prepínač -t reprezentujúci prepínač s parametrom (d) dva nepomenované argumenty java a xml  Ak by sme mali takéto argumenty spracovávať ručne, bolo by to šialené. Príkaz getopts sa s tým vysporiada veľmi jednoducho.</description>
    </item>
    
    <item>
      <title>Urobme niečo s `make`</title>
      <link>http://novotnyr.github.io/scrolls/urobme-nieco-s-make/</link>
      <pubDate>Fri, 04 Jan 2019 14:57:45 +0100</pubDate>
      
      <guid>http://novotnyr.github.io/scrolls/urobme-nieco-s-make/</guid>
      <description>O make a makefile súboroch make zjednoduší zostavovanie súborov - teda kompilovanie, konverzie, či akékoľvek iné hromadné spracovanie súborov. Zostaviť binárku zo zdrojáku v Céčku? Vytvoriť PDF súbor v diplomovej práce v LaTeXu? Previesť markdownovské zdrojové súbory do HTML? To všetko make zvládne bez problémov.
A keďže už od nepamäti je súčasťou každého Linuxu, či dokonca MacOS, oplatí sa ho spoznať!
Jednoduché recepty, najmä pre céčkarov Recept: overenie, že make funguje make je naozaj všade!</description>
    </item>
    
  </channel>
</rss>