<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>robonovotny</title>
    <link>https://novotnyr.github.io/</link>
    <description>Recent content on robonovotny</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 15 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://novotnyr.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Recepty pre gorutiny a kanály -- worker pool</title>
      <link>https://novotnyr.github.io/scrolls/goroutines-vzory-pouzitie-3-worker-pool/</link>
      <pubDate>Sun, 15 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/goroutines-vzory-pouzitie-3-worker-pool/</guid>
      <description>Minule sme vážili zvieratá na viacerých gorutinách. Ukážme si situáciu, keď máme worker pool, teda bank konkrétneho počtu gorutín, ktoré si vyberajú robotu zo spoločného frontu, spracovávajú a výsledky posielajú do nového spoločného frontu.
Začnime opäť vážiť zvieratá.
Kostra V kostre si len vytvorme kanál pre zvieratá, do ktorého budeme posielať jedince súce na váženie.
Rovno povedzme, že toto skončí deadlockom.
package main func streamWork(animalChan chan&amp;lt;- Animal) { for _, animal := range animals { animalChan &amp;lt;- animal (2) } close(animalChan) (3) } func main() { animalChan := make(chan Animal) (1) streamWork(animalChan) (4) } type Animal struct { species string weight int } var animals = []Animal{ Animal{&amp;#34;slon&amp;#34;, 12}, Animal{&amp;#34;hroch&amp;#34;, 4}, Animal{&amp;#34;nosorožec&amp;#34;, 4}, Animal{&amp;#34;žirafa&amp;#34;, 2}, Animal{&amp;#34;bizón&amp;#34;, 2}, Animal{&amp;#34;veľryba&amp;#34;, 190}, } 1 Nebufferovaný kanál, z ktorého si budú neskôr pracujúce gorutiny vyberať úlohy.</description>
    </item>
    
    <item>
      <title>Recepty pre gorutiny a kanály -- viacero korutín si delí prácu</title>
      <link>https://novotnyr.github.io/scrolls/goroutines-vzory-pouzitie-2/</link>
      <pubDate>Thu, 12 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/goroutines-vzory-pouzitie-2/</guid>
      <description>Tisíc zlatých, tisíc zlatých gorutín V minulom dieli sme spúšťali jedinú gorutinu, ale je čas pridať plyn.
Spustime tisíc gorutín, ktoré si sekundu pospia a potom vypíšu bodku.
Ukážme si zároveň, ako je možné spustiť anonymnú funkciu v gorutine.
package main import ( &amp;#34;log&amp;#34; &amp;#34;time&amp;#34; ) func main() { for i := 0; i &amp;lt; 1000; i++ { go func() { (1) time.Sleep(1 * time.Second) log.Printf(&amp;#34;.\n&amp;#34;) }() } } 1 Spúšťame anonymnú funkciu ako gorutinu.</description>
    </item>
    
    <item>
      <title>Recepty pre gorutiny a kanály</title>
      <link>https://novotnyr.github.io/scrolls/goroutines-vzory-pouzitie/</link>
      <pubDate>Sat, 07 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/goroutines-vzory-pouzitie/</guid>
      <description>Čo je gorutina? Gorutina je ľahučké vlákenko na vykonávanie paralelných úloh v Go.
Paralelné gorutiny Vypisujme paralelne čísla od 1 po 10.
package main import ( &amp;#34;log&amp;#34; &amp;#34;time&amp;#34; ) func main() { go print(&amp;#34;goroutine&amp;#34;) (1) print(&amp;#34;main&amp;#34;) (2) } func print(c string) { for i := 0; i &amp;lt; 10; i++ { log.Printf(&amp;#34;%10s %d\n&amp;#34;, c, i) time.Sleep(1 * time.Second) (3) } } 1 Spustíme funkciu ako gorutinu paralelne s behom funkcie main.</description>
    </item>
    
    <item>
      <title>Gorutiny a atomické počítadlá</title>
      <link>https://novotnyr.github.io/scrolls/gorutiny-atomicke-pocitadla/</link>
      <pubDate>Fri, 06 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/gorutiny-atomicke-pocitadla/</guid>
      <description>Počítajme slová vo vetách s gorutinami!
package main import ( &amp;#34;log&amp;#34; &amp;#34;strings&amp;#34; ) var input = `A ty mor ho! — hoj mor ho! detvo môjho rodu, kto kradmou rukou siahne na tvoju slobodu; a čo i tam dušu dáš v tom boji divokom: Mor ty len, a voľ nebyť, ako byť otrokom.` func main() { lines := strings.Split(input, &amp;#34;\n&amp;#34;) for _, line := range lines { go countWords(line) } } func countWords(line string) { words := strings.</description>
    </item>
    
    <item>
      <title>Go a simulácia abstraktných metód</title>
      <link>https://novotnyr.github.io/scrolls/go-oop-abstraktne-metody/</link>
      <pubDate>Mon, 19 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/go-oop-abstraktne-metody/</guid>
      <description>V Go neexistujú abstraktné metódy. To často spôsobuje prekvapivé správanie.
Vytvorme si útvar s menom:
type Shape struct { name string } func (s *Shape) Name() string { return s.name } Použime ho:
func main() { s := Shape{&amp;#34;some square&amp;#34;} fmt.Println(s.Name()) } Vyrobme na pomenovanom útvare metódu, ktorá popíše jeho vlastnosti ako reťazec, pričom detaily o útvare zabezpečí príslušný útvar, ktorý embedduje Shape — kruh uvedie polomer, štvorec uvedie dĺžku strany a pod.</description>
    </item>
    
    <item>
      <title>Go a zádrhele pri objektoch</title>
      <link>https://novotnyr.github.io/scrolls/go-a-objekty/</link>
      <pubDate>Sun, 18 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/go-a-objekty/</guid>
      <description>Go, štruktúry a správanie Objekty sú hlavne o správaní.
A to bez ohľadu na jazyk, v ktorom ich používame, čiže aj v jazyku Go.
Geometrické útvary Zoberme si také geometrické útvary, ktorým chceme rátať plochu.
type Shaper interface { Area() float64 } Vyrobíme teda interfejs, ktorý reprezentuje kontrakt pre akýkoľvek objekt, ktorý dokáže vyrátať svoju plochu.
Najprv štvorce Prvým takýmto útvarom bude útvar — štvorec. Na výpočet plochy potrebujeme jediný stav: veľkosť jeho strany side.</description>
    </item>
    
    <item>
      <title>Git a podpisovanie komitov cez GPG</title>
      <link>https://novotnyr.github.io/scrolls/git-gpg-podpisovanie-commit/</link>
      <pubDate>Wed, 09 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/git-gpg-podpisovanie-commit/</guid>
      <description>Nainštalujme gpg:
brew install gpg Nagenerujeme pár kľúčov:
gpg --full-generate-key Vznikne adresár v domovskom priečinku ~/.gnupg. Pozrime jeho výpis.
ls ~/.gnupg Vypíšme kľúče:
gpg --list-secret-keys --keyid-format=long Uvidíme:
/Users/novotnyr/.gnupg/pubring.kbx ---------------------------------- sec ed25519/5FAE3B1F51B63E0C 2022-11-08 [SC] 15E5B5BA00311CEF2DD287D55FAE3B1F51B63E0C uid [ultimate] Robert Novotny &amp;lt;redacted@gmail.com&amp;gt; ssb cv25519/3631AF913E983143 2022-11-08 [E] Identifikátor je 5FAE3B1F51B63E0C.
Exportnime do súboru
gpg --armor --export 5FAE3B1F51B63E0C Export pridáme do UI GItHubu: GitHub Settings &amp;gt; Keys
Overme, že podpisovanie funguje v základe:
echo &amp;#34;test&amp;#34; | gpg --clearsign gpg si poprosí heslo k privátnemu kľúču cez dialóg v termináli a následne vypíše napr.</description>
    </item>
    
    <item>
      <title>SOAP, JAX-WS, Metro a časy v `java.time`</title>
      <link>https://novotnyr.github.io/scrolls/jax-ws-serializacia-java-time/</link>
      <pubDate>Mon, 31 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/jax-ws-serializacia-java-time/</guid>
      <description>Eclipse Metro nevie pracovať s balíčkom java.time.
To je zvláštne, lebo Java 8 je tu od roku 2014, ale vieme to napraviť!
V skutočnosti, s java.time nevie pracovať knižnica JAXB (Jakarta XML Data Binding), ale tá je súčasťou Metra.
Budeme potrebovať:
Javu aspoň 11, ale podpora beží veselo na Jave 17 — poslednom LTS v čase písania článku
Eclipse Metro pre Jakarta EE 10 (JAX-WS 4.0)
Binding customizations Prispôsobenia prevodu XML na objekty a späť, zvané tiež marshalling, či serializácia.</description>
    </item>
    
    <item>
      <title>SOAP, JAX-WS, Metro a serializácia dátumov a časov</title>
      <link>https://novotnyr.github.io/scrolls/jax-ws-a-praca-s-casom-java-time/</link>
      <pubDate>Mon, 31 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/jax-ws-a-praca-s-casom-java-time/</guid>
      <description>Vytvorme SOAP web service pomocou JAX-WS 4.0 (Jakarta XML Web Services) a Eclipse Metro.
Ak používame základné dátové typy, všetko je v poriadku. Vo chvíli, keď začneme používať dátumy a časy z knižnice java.time, nastanú problémy.
Príprava pom.xml Pripravme si mavenovský projekt, kde dodajme závislosti na Metre a podporu pre Javu 17.
pom.xml &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;project xmlns=&amp;#34;http://maven.apache.org/POM/4.0.0&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xsi:schemaLocation=&amp;#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;#34;&amp;gt; &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt; &amp;lt;groupId&amp;gt;com.github.novotnyr&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jaxws-java-util-time-server&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;maven.compiler.source&amp;gt;17&amp;lt;/maven.compiler.source&amp;gt;(3) &amp;lt;maven.compiler.target&amp;gt;17&amp;lt;/maven.compiler.target&amp;gt; &amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt; &amp;lt;/properties&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.</description>
    </item>
    
    <item>
      <title>Od WSDL k webovej službe — generovanie servera a klienta pomocou Metro na Java 17</title>
      <link>https://novotnyr.github.io/scrolls/od-wsdl-k-webovej-sluzbe-metro-pre-java-17/</link>
      <pubDate>Sun, 30 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/od-wsdl-k-webovej-sluzbe-metro-pre-java-17/</guid>
      <description>Úvod Navrhli sme webovú službu pre SOAP pomocou contract-first? Máme teda kontrakt reprezentovaný súborom WSDL?
Poďme vygenerovať kód pre server SOAP na kombinácii:
Java 17
špecifikáciu Jakarta XML Web Services 4.0 (nástupca JAX-WS)
referenčnú implementáciu Eclipse Metro.
plugin pre Maven z knižnice Eclipse Metro.
Príklad a štruktúra dát Vybudujme si službu pre objednanie parkovania. V požiadavke pošleme EČV vozidla a parkovaciu zónu a v odpovedi získame identifikátor parkovacieho lístka a dátum platnosti.</description>
    </item>
    
    <item>
      <title>Podpora webových služieb SOAP v Java 11 a novšej cez Eclipse Metro</title>
      <link>https://novotnyr.github.io/scrolls/podpora-webovych-sluzieb-v-java-11-a-novsej/</link>
      <pubDate>Sun, 30 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/podpora-webovych-sluzieb-v-java-11-a-novsej/</guid>
      <description>Ak chceme v Jave 11 alebo novšej zverejniť webovú službu v protokole SOAP, máme k dispozícii základnú špecifikáciu Jakarta XML Web Services 4.0.
Tá:
je pod dáždnikom špecifikácie Jakarta EE 10
je evolúciou z overenej technológie Java XML Web Service 2.0 (JAX-WS 2.0)
vyžaduje aspoň Javu 11
funguje bez problémov aj na Jave 17
je postavená na balíčkoch jakarta., ktoré sa budú naďalej vyvíjať a majú podporu vo frameworkoch.</description>
    </item>
    
    <item>
      <title>Stretnutie 1</title>
      <link>https://novotnyr.github.io/courses/projekt1-2022/stretnutie1/</link>
      <pubDate>Thu, 17 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://novotnyr.github.io/courses/projekt1-2022/stretnutie1/</guid>
      <description>GitLab GitLab je mnohoúčelová platforma pre:
verzovací nástroj pre Git, kde si tím môže zdieľať zdrojové kódy projektov
sledovanie incidentov — issue tracking — úlohy/chyby/problémy, ktoré treba v projekte vyriešiť
continuous integration / continuous delivery (CI/CD) — automatizované nasadzovanie projektov na servery a ich doručovanie zákazníkovi
Note Každý účastník má login a heslo do prírodovedeckého Gitlabu na https://gitlab.science.upjs.sk/. Zakladanie projektov Každý účastník má svoju vlastnú skupinu (group), teda priestor, v ktorom si môže do vôle navytvárať vlastné projekty.</description>
    </item>
    
    <item>
      <title>Od WSDL k webovej službe — generovanie servera a klienta pomocou Metro na Java 11</title>
      <link>https://novotnyr.github.io/scrolls/od-wsdl-k-webovej-sluzbe-metro-pre-java-11/</link>
      <pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/od-wsdl-k-webovej-sluzbe-metro-pre-java-11/</guid>
      <description>Úvod Navrhli sme webovú službu pre SOAP pomocou contract-first? Máme teda kontrakt reprezentovaný súborom WSDL?
Poďme vygenerovať kód pre server na platforme Java 11!
Použijeme na to štandard JAX-WS 2.0 a jeho tradičnú implementáciu Metro.
Java 11 je prvá verzia, ktorá už neobsahuje v základnej knižnici implementáciu JAX-WS 2.0. Zároveň je to posledná verzia, na ktorej referenčná implementácia Metro zatiaľ funguje. Keďže technická podpora tejto Javy končí v roku 2026, dúfajme, že sa to dovtedy podarí zladiť.</description>
    </item>
    
    <item>
      <title>Otvorila monádu a ... našla v nej celý výpočet!</title>
      <link>https://novotnyr.github.io/scrolls/otvorila-monadu-a-nasla-v-nej-cely-vypocet/</link>
      <pubDate>Sun, 26 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/otvorila-monadu-a-nasla-v-nej-cely-vypocet/</guid>
      <description>Otvorila som monádu a ostala som v šoku! Bola v nej celá história!
Výpočty robíme bežne, napríklad:
var message = &amp;quot;twinkle twinkle little star&amp;quot;; message = message.toUpperCase(); message = message.replace(&amp;quot; &amp;quot;, &amp;quot;&amp;quot;); message = message.substring(0, 14) Čo keby sme však chceli vedieť, aký je výsledok po každom kroku? To by sme museli všade napchať logovanie:
var message = &amp;quot;twinkle twinkle little star&amp;quot;; message = message.toUpperCase(); log(&amp;quot;Uppercase: &amp;quot; + message); message = message.</description>
    </item>
    
    <item>
      <title>Použila listy s monádou a zažila šok!</title>
      <link>https://novotnyr.github.io/scrolls/pouzila-listy-s-monadou-a-zazila-sok/</link>
      <pubDate>Sat, 25 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/pouzila-listy-s-monadou-a-zazila-sok/</guid>
      <description>Odkedy používam zoznamy s monádou, môj život je omnoho lepší!
Už včera sme videli, že škatule a objekty Maybe zlepšujú zápis alebo predchádzajú chybám s null! A to všetko vďaka návrhovému vzoru monáda.
Teraz je čas postúpiť ďalej: kým škatule a môžbyť obsahovali vec alebo „žiadnu vec“, ukážme si namonádovaný zoznam, ktorý obsahuje viac položiek!
Monáda potrebuje:
Dátový typ, ktorý obalí, Spôsob, akým obalí veci daného typu, Metódu, ktorá vybalí vnútro monády, použije naň funkciu a z nej získa novú zabalenú vec.</description>
    </item>
    
    <item>
      <title>Zlepšila som si život prípravkom proti `null`!</title>
      <link>https://novotnyr.github.io/scrolls/zlepsila-som-si-zivot-repelentom-proti-null/</link>
      <pubDate>Fri, 24 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/zlepsila-som-si-zivot-repelentom-proti-null/</guid>
      <description>V predošlom dieli sme videli použitie návrhového vzoru monáda na príklade škatule, ktorá dokázala obaliť ľubovoľný reťazec.
Teraz je čas to trochu vylepšiť.
Vytvoríme triedu, ktorá dokáže obaliť ľubovoľný dátový typ &amp;ndash; nielen reťazec. Pomenujeme ju Maybe, pretože „možno bude obsahovať objekt, možno nie“. Vylepšíme funkciu then, ktorá umožní premeniť obsah vnútra z jedného dátového typu na druhý. Načo je trieda Maybe? Keďže null je chyba za miliardu dolárov, skúsme to odstrániť.</description>
    </item>
    
    <item>
      <title>Škatule na `null` a pyramídy hrôzy</title>
      <link>https://novotnyr.github.io/scrolls/skatule-null-pyramida-hrozy/</link>
      <pubDate>Mon, 20 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/skatule-null-pyramida-hrozy/</guid>
      <description>Predstavme si, že chceme parsovať súbor s nasledovnými vlastnosťami:
po riadkoch sú uvedené údaje o používateľoch systému každý riadok obsahuje položky oddelené dvojbodkami piata položka obsahuje kontaktné údaje oddelené čiarkou Príklad riadku?
root:*:0:0:System Administrator,42A,555-798-4765,555-291-3511,root@example.com:/var/root:/bin/sh Áno, je to riadok z unixového súboru /etc/passwd.
Prvá položka predstavuje login používateľa: root. Druhá, tretia a štvrtá položka nie je zaujímavá. Piata položka &amp;ndash; záznam GECOS obsahuje: popis používateľa číslo miestnosti pracovné telefónne číslo súkromné telefónne číslo mailovú adresu Urobme si triedu s metódou, ktorá zistí e-mailovú adresu používateľa.</description>
    </item>
    
    <item>
      <title>Funkcie s korením -- curry a iné príchute</title>
      <link>https://novotnyr.github.io/scrolls/curry-funkcie-s-korenim/</link>
      <pubDate>Mon, 13 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/curry-funkcie-s-korenim/</guid>
      <description>Lemon curry?
— Monty Python&amp;rsquo;s Flying Circus, Ep. 33 — Salad Days, 30. 11. 1972
Naklepávame a koreníme funkcie V predošlom dieli sme videli, ako možno v Scale 3 jednoducho pretvárať viacparametrové funkcie na menej parametrové pomocou čiastočnej aplikácie (partial application).
Spomeňme si na funkciu wc z predošlého dielu:
def wc(countType: String, lines: List[String]): Int = // ... Funkcia wc, ktorá berie dva parametre &amp;ndash; typ a zoznam riadkov &amp;ndash; sa dá zmeniť na funkciu WC s jedným parametrom countType typu String , ktorá vracia funkciu s jedným parametrom typu List[String].</description>
    </item>
    
    <item>
      <title>Šok! Funkcie v Scale sú objekty!</title>
      <link>https://novotnyr.github.io/scrolls/sok-funkcie-v-scale-su-objekty/</link>
      <pubDate>Sun, 12 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/sok-funkcie-v-scale-su-objekty/</guid>
      <description>Aký je rozdiel medzi súdruhom N. a japonskou kalkulačkou?
Žiadny, majú rovnaký počet funkcií.
— anektoda z polovice 20. storočia
Funkcie a ich skladanie Vytvorme funkciu, ktorá zoberie jeden súbor File a vráti zoznam riadkov, ktoré sa v ňom nachádzajú. Inak povedané, niečo ako nástroj cat z Linuxu.
import java.io.File import scala.io.Source def cat(file: File): List[String] = val source = Source.fromFile(file) try source.getLines().toList finally source.close() Funkcia cat má nasledovný dátový typ:</description>
    </item>
    
    <item>
      <title>Tomcat a TLS konektor s podporou PKCS#12</title>
      <link>https://novotnyr.github.io/scrolls/tomcat-a-tls-konektor-s-podporou-pkcs12/</link>
      <pubDate>Tue, 09 Feb 2021 22:40:41 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/tomcat-a-tls-konektor-s-podporou-pkcs12/</guid>
      <description>Tomcat 8.5 a novší už obsahujú vysokovýkonné konektory založené na neblokujúcim API Java.NIO. Výhodou je výkon porovnateľný s použitím natívnej knižnice APR (ktorú využíva hlavne Apache HTTPD server).
Ak používame SSL/TLS, máme ďalšiu výhodu. Certifikáty a privátne kľúče nemusíme ukladať do ťarbavých JKS keystorov, ale vieme použiť univerzálny formát známy z OpenSSL (PEM) vo formáte PKCS#12. Inými slovami, súbory typu -----BEGIN CERTIFICATE a -----BEGIN PRIVATE KEY vieme použiť priamo.
Konfigurácia V Tomcate, v súbore server.</description>
    </item>
    
    <item>
      <title>Migrácia medzi dvoma MacOS pomocou `rsync`</title>
      <link>https://novotnyr.github.io/scrolls/rsync-medzi-macos/</link>
      <pubDate>Fri, 01 Jan 2021 23:27:50 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/rsync-medzi-macos/</guid>
      <description>Migrácia na nový MacBook Pro je malina. Naozaj sa nestratia žiadne dáta?
Štandardný postup je jednoduchý
Oba stroje sa pripoja k rovnakej WiFi. Na každom stroji sa pustí Migration Assistant. Po pár hodinách je všetko magicky zmigrované. Akurát pri mojej migrácii Macbook Pro zahlásil:
Niektoré súbory sa nepodarilo zmigrovať.
Ktoré? Všetky? Niektoré náhodné? Nik nevie.
Nový stroj jede&amp;hellip; Jenom neseje. Nový stroj zdanlivo išiel bez problémov - až zázračne. A to sa migrovala High Sierra na Big Sur!</description>
    </item>
    
    <item>
      <title>Pokročilé funkcie v Powershelli</title>
      <link>https://novotnyr.github.io/scrolls/powershell-pokrocile-funkcie/</link>
      <pubDate>Tue, 17 Nov 2020 21:09:01 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/powershell-pokrocile-funkcie/</guid>
      <description>Funkcie v PowerShelli sa dajú zapisovať rozličnými spôsobmi. Ukážme si jednoduchú funkciu, ktorá zráta veľkost súborov v aktuálnom adresári:
function Get-Size($Unit) { Get-ChildItem -File | Measure-Object -Property Length -Sum | Select-Object -ExpandProperty Sum | ForEach-Object { $_ / (&amp;#34;1&amp;#34; + $Unit)} } Funkcia má jeden netypovaný parameter s názvom $Unit a vieme ju použiť nasledovne:
Get-Size MB Konvencie však odporúčajú zapisovať parametre v sekcii param:
function Get-Size { param ( [String] $Unit = &amp;#34;MB&amp;#34; ) Get-ChildItem -File | Measure-Object -Property Length -Sum | Select-Object -ExpandProperty Sum | ForEach-Object { $_ / (&amp;#34;1&amp;#34; + $Unit)} } Parameter $Unit má implicitnú hodnotu MB a je typu String.</description>
    </item>
    
    <item>
      <title>Integrácia Thunderbird a Office 365</title>
      <link>https://novotnyr.github.io/scrolls/integracia-thunderbird-office365/</link>
      <pubDate>Sat, 31 Oct 2020 00:50:08 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/integracia-thunderbird-office365/</guid>
      <description>Thunderbird sa dokáže integrovať s Office 365 podobným spôsobom ako Outlook.
K dispozícii je integrácia kalendára, kontaktov a za poplatok aj spracovávanie pozvánok na udalosti .
Budeme pracovať s troma add-onmi (doplnkami).
TBSync &amp;ndash; integrácia kontaktov, kalendáre a úlohy. EAS Sync pre TBSync &amp;ndash; podpora pre Exchange ActiveSync, ktorou z Office 365 vytiahneme kontakty. OWL for Exchange &amp;ndash; platený plugin pre e-maily a pozvánky na udalosti pre protokol Outlook Web Access (OWA).</description>
    </item>
    
    <item>
      <title>Ako zmeniť `SHELL` v súboroch `Makefile`?</title>
      <link>https://novotnyr.github.io/scrolls/zmena-shell-v-makefile/</link>
      <pubDate>Fri, 30 Oct 2020 21:11:50 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/zmena-shell-v-makefile/</guid>
      <description>Makefile prevezme použitý shell zo svojej internej premennej SHELL (pozri sekcia 5.3.2 v dokumentácii GNU Make). Štandardná hodnota je /bin/sh.
Premennú môžeme zmeniť klasickým spôsobom:
export SHELL = /bin/bash .PHONY: all all: echo ${SHELL} Použitie klauzuly export je nutné, pretože bez neho sa premenná neexportuje do externých skriptov, ani do sub-makeov.
Načo vlastne predefinovávať? Nápad zmeniť shell je málokedy dobrý. Moderné distribúcie očakávajú, že skripty budú implementované v norme POSIX a nebudú používať žiadne špeciality bashizmy, ani konštrukcie zo zsh či nebodaj fish.</description>
    </item>
    
    <item>
      <title>Saga – distribuované transakcie v nezávislých databázach</title>
      <link>https://novotnyr.github.io/scrolls/saga-distribuovane-transakcie-v-microservice-architekture/</link>
      <pubDate>Sat, 23 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/saga-distribuovane-transakcie-v-microservice-architekture/</guid>
      <description>„Povedzte učiteľovi, že nemám ságy,“ úctivo odpovedal Ostap.
— Iľf-Petrov, Zlaté teľa (1931)
Kedy ságy? Ak máme bežnú relačnú databázu na jednom stroji a chceme to mať postavené dobre, použijeme transakcie spĺňajúce zásady ACID.
Ak máme bežnú relačnú databázu rozdelenú na viacero strojov (partície) a chceme to mať tiež postavené dobre, použijeme dvojfázový komit (2PC, two-phase commit).
Ak máme viacero nezávislých databáz — napríklad každá mikroslužba má svoju databázu — dvojfázový komit sa nedá realizovať.</description>
    </item>
    
    <item>
      <title>Preverme si skripty shellcheck-om!</title>
      <link>https://novotnyr.github.io/scrolls/preverme-si-skripty-shellcheckom/</link>
      <pubDate>Fri, 22 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/preverme-si-skripty-shellcheckom/</guid>
      <description>Linuxové shelly pochádzajú čias, keď boli starí tvorcovia krutí a malicherní a tomu zodpovedá aj syntax. (Nehovoriac o tom, že v tých časoch ešte ani Linux nebol.)
Nejedna noc bola premárnená hľadaním nadbytočnej medzery, a nejedna klávesnica rozmlátená pri zistení, že skript vymazal to, čo nemal.
Okrem toho, best practices pripomínajú zaklínadlá zo stredoveku, než logické rady. (“Pri čítaní obsahu premenných dajte pred názov premennej dolár a celé to obaľte do úvodzoviek”.</description>
    </item>
    
    <item>
      <title>Distribuované databázové transakcie cez Two Phase Commit (2PC)</title>
      <link>https://novotnyr.github.io/scrolls/two-phase-commit/</link>
      <pubDate>Mon, 18 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/two-phase-commit/</guid>
      <description>Predstavme si učebnicový prevod peňazí medzi Alicou a Bobom. Ak máme databázu na jednom stroji, implementácia je otázkou transakcie.
Ak je transakcí mnoho a rozdelíme ich medzi viacero strojov, získame síce vyšší výkon, ale vyrobíme si ďalšie problémy.
Algoritmus Two Phase Commit (2PC) je prastarý algoritmus na správny beh transakcií v distribuovaných databázach.
Klasické transakcie Učebnicová transakcia vyzerá nasledovne:
Začneme transakciu (begin) Z Alicinho účtu odíde 20 korún. Bobovi príde 20 korún.</description>
    </item>
    
    <item>
      <title>Building Midnight Commander on Synology NAS</title>
      <link>https://novotnyr.github.io/scrolls/building-midnight-commander-on-synology/</link>
      <pubDate>Sun, 03 Nov 2019 23:49:50 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/building-midnight-commander-on-synology/</guid>
      <description>We’ve got an ancient Synology NAS: DS212 from 2012. Now, we want to build a mc, so we can see a shiny blue double-panel file manager.
To make things more funny, let’s build from sources.
Where are we? Just out of curiosity, let’s see the version:
uname -a Something like this should show up:
Linux Vault 2.6.32.12 #24922 Tue Apr 23 17:32:06 CST 2019 armv5tel GNU/Linux synology_88f6282_212 Let’s switch to root For the sake of simplicity, let’s switch to the root user.</description>
    </item>
    
    <item>
      <title>WebElement #46 – zápisky</title>
      <link>https://novotnyr.github.io/scrolls/webelement-46-presov-zapisky/</link>
      <pubDate>Sat, 02 Nov 2019 11:37:38 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/webelement-46-presov-zapisky/</guid>
      <description>Dátum: 30. október 2019, Wave Prešov
Comeback (prvýkrát)! WebElement v Prešove rozhodne nie je neznáma vec. Od roku 2011 mali už štyridsaťšesť meetupov (a ani raz sa mi ho nepodarilo stihnúť; vina je jednoznačne (!!!) na strane národných dopravcov, kde je nemožné sa večer dostať z Prešova do Košíc).
Tentokrát som sa odhodlal a vpadol rovno na „comeback“ (pretože to bol len druhý meetup po deväťmesačnej prestávke) a rovno som videl tri dve prednášky.</description>
    </item>
    
    <item>
      <title>OpenSlava 2019 — zápisky</title>
      <link>https://novotnyr.github.io/scrolls/openslava-2019-report/</link>
      <pubDate>Thu, 31 Oct 2019 10:36:17 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/openslava-2019-report/</guid>
      <description>Nebojím sa povedať, že OpenSlava je najväčšia vývojárska konferencia na Slovensku. Celý deň, päť trackov, 40 (!) talkov, málo bullshitu a marketingu. A bezplatná (lebo Accenture). A pekné priestory (lebo STU v Bratislave).
OpenSlave sa darí dobre vyhmatať súčasné trendy — napríklad túto sezónu letí AI / Machine Learning, masírovanie dát zľava is sprava, orchestrácia služieb Kubernetes, platformy pre aplikácie GraalVM a Quarkus, a samozrejme nevyhnutný blockchain.
Google Flutter (Roman Schiefer) Prvá prednáška, ktorú som navštívil bola o Google Flutter.</description>
    </item>
    
    <item>
      <title>Asynchrónne veci v JavaScripte pomocou callbackov, promises a async/await</title>
      <link>https://novotnyr.github.io/scrolls/asynchronne-veci-v-javascripte-callback-promise-async-await/</link>
      <pubDate>Tue, 29 Oct 2019 10:49:00 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/asynchronne-veci-v-javascripte-callback-promise-async-await/</guid>
      <description>Úvod JavaScript v browseroch sa vykonáva v jednom vlákne ale chceme riešiť veci na pozadí príklad: klient REST API nemôžeme čakať, kým dobehne HTTP request na pozadí, trvalo by to dlho, a vlákno by bolo zablokované príklad: výkonný server v Node.js nebudeme pre každého klienta spúšťať nové vlákno, namiesto neho použijeme udalosťami orientovaný systém bez blokovania a čakania JavaScript nemá analógiu javáckych Threadov, ale má iné mechanizmy Riešení je viacero:</description>
    </item>
    
    <item>
      <title>Validating SOAP Web Service Compliance with WS-IT -- Four Approaches</title>
      <link>https://novotnyr.github.io/scrolls/wsdl-validation-with-ws-it/</link>
      <pubDate>Tue, 15 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/wsdl-validation-with-ws-it/</guid>
      <description>Web Service Interoperability Technology (WS-IT) ensures a fundamental compatibility of SOAP Web Services across major framework implementations.
Originally conceived as a agreement between Java and .NET, it is now supported across multiple technologies.
There are multiple approaches to WS-IT Compatibility Checks:
. Use Eclipse IDE with Eclipse Java Web Developer Tools. . Use https://www.soapui.org/[SoapUI] and WS-IT Compliance verification . Use http://www.ws-i.org/Testing/Tools/2005/06/[ws-it.org] Java/C# Compliance Tools . Use standalone Java-based commandline validator at Github, repo https://github.</description>
    </item>
    
    <item>
      <title>Vytváranie WSDL s Eclipse Web Developer Tools</title>
      <link>https://novotnyr.github.io/scrolls/vytvaranie-wsdl-s-eclipse-web-developer-tools/</link>
      <pubDate>Mon, 14 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/vytvaranie-wsdl-s-eclipse-web-developer-tools/</guid>
      <description>Screencast ukazuje, ako vytvárať webové služby nad protokolom SOAP s použitím Eclipse IDE a pluginu Java EE Web Developer Tools.
Schéma pre správy Schéma zobrazená vo videu pochádza z článku Tvoríme XML schému pomocou Eclipse IDE.
Návrh WSDL Ak máme ujasnenú schému, môžeme navrhovať WSDL. V Eclipse môžeme zvoliť New | File | Web Services | WSDL File a vytvoriť súbor words.wsdl.
V dialógu potrebujeme vyplniť štyri základné veci:
cieľový menný priestor: reprezentuje jednoznačný menný priestor pre deklarácie v tomto WSDL dokumente.</description>
    </item>
    
    <item>
      <title>SOAP Web Service Compliance with WS-IT in Eclipse IDE</title>
      <link>https://novotnyr.github.io/scrolls/soap-webservice-validation-wsit-eclipse/</link>
      <pubDate>Sat, 12 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/soap-webservice-validation-wsit-eclipse/</guid>
      <description>Eclipse IDE (with Eclipse Java Web Developer Tools plugin) provides a WS-IT Validation capability on WSDL files. This ensures a fundamental interoperability across major SOAP frameworks.
However, WS-IT.org is often offline. In that case, validation fails and we need to workaround!
The best-case scenario The WS-IT validator directly contacts the WS-IT.org portal. It fetches the validation results, processes and exports them to the Problems view.
Working around WS-IT.org outages WS-IT.</description>
    </item>
    
    <item>
      <title>Tvoríme XML schému pomocou Eclipse IDE</title>
      <link>https://novotnyr.github.io/scrolls/tvorime-xml-schema-pomocou-eclipse/</link>
      <pubDate>Wed, 09 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/tvorime-xml-schema-pomocou-eclipse/</guid>
      <description>Úvod Ukážeme si, ako je možné pomocou Eclipse IDE rýchlo vytvoriť XML schému pre dokumenty, čím si urobíme výborný základ pre budúci vývoj WSDL v SOAP službách alebo pre generovanie mapovaní medzi XML a objektami cez Java technológiu JAXB.
Požadovaný softvér Budeme potrebovať Eclipse IDE a modul Eclipse Java Web Developer Tools. Jeho súčasťou je podpora pre vývoj webových služieb protokolu SOAP (Web Service Tools).
Príklad: budúca webová služba Ustanovenie vstupno-výstupných dokumentov Predstavme si, že chceme vyvinúť službu pre pre prekladový slovník, ktorá bude prijímať nasledovný dokument:</description>
    </item>
    
    <item>
      <title>Od WSDL k webovej službe – tvoríme vlastné WSDL</title>
      <link>https://novotnyr.github.io/scrolls/od-wsdl-k-webovej-sluzbe-tvorime-vlastne-wsdl/</link>
      <pubDate>Mon, 07 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/od-wsdl-k-webovej-sluzbe-tvorime-vlastne-wsdl/</guid>
      <description>Úvod Pri návrhu webových služieb nad protokolom SOAP sa môžeme vydať dvoma rozličnými cestami. Pri tom jednoduchšom postavíme webovú službu vo vhodnej technológii (JAX-WS, či PHP-WSDL Creator, a WSDL si necháme vygenerovať automaticky, čím dosiahneme tzv. contract-last spôsob.
Opačný spôsob, contract-first spočíva v nadefinovaní WSDL, na základe ktorého si necháme vygenerovať jednak kostru pre server, a neskôr i klienta.
Postup od WSDL k triedam má mnohé výhody. Ota &amp;#39;tapik&amp;#39; Buchta napr.</description>
    </item>
    
    <item>
      <title>XML Schema – tutoriál nielen pre tvorcov SOAP služieb</title>
      <link>https://novotnyr.github.io/tomes/xml-schema-tutorial-nielen-pre-tvorcov-soap-sluzieb/</link>
      <pubDate>Sun, 06 Oct 2019 09:24:38 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/tomes/xml-schema-tutorial-nielen-pre-tvorcov-soap-sluzieb/</guid>
      <description>Text tutoriálu Prejsť na HTML verziu tutoriálu Stiahnuť PDF verziu tutoriálu Príklady Príklady XML schém, ich inštancií a situácií z tutoriálu </description>
    </item>
    
    <item>
      <title>Podpora webových služieb SOAP v Java 9 a novšej</title>
      <link>https://novotnyr.github.io/scrolls/podpora-webovych-sluzieb-v-java-9-a-novsej/</link>
      <pubDate>Wed, 02 Oct 2019 08:42:32 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/podpora-webovych-sluzieb-v-java-9-a-novsej/</guid>
      <description>Ak chceme v Jave zverejniť webovú službu v protokole SOAP, máme k dispozícii základnú špecifikáciu JSR 224: JavaTM API for XML-Based Web Services (JAX-WS) 2.0. Stačí si vybrať jednu zo štyroch knižníc alebo bezpočtu aplikačných serverov, v ktorej službu implementujeme.
Rokmi overená istota, ktorú si ukážeme, je SOAP služba implementovaná v knižnici Metro.
Ukážeme si:
Vytvorenie serverovskej časti: od kódu ku automaticky generovanému popisu služby cez WSDL. Vytvorenie klientskej časti: vygenerovaním kódu klienta na základe WSDL.</description>
    </item>
    
    <item>
      <title>Rýchle slajdy s `backslide` a `remark.js`</title>
      <link>https://novotnyr.github.io/scrolls/rychle-slajdy-s-backslide-remark-js/</link>
      <pubDate>Thu, 29 Aug 2019 14:08:58 +0200</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/rychle-slajdy-s-backslide-remark-js/</guid>
      <description>Patláme slajdy Treba rýchlo slajdy? PowerPoint je neohrabaný? Beamer je zložitý? A prečo vlastne nepíšeme slajdy v jednoduchom Markdowne? A prečo ich nezobrazujeme v bežnom webovom prehliadači?
Budeme potrebovať:
editor pre Markdown, napríklad notepad remark.js, knižnicu pre web, ktorá vyrenderuje Markdown ako HTML, a to priamo v prehliadači backslide, knižnicu pre príkazový riadok, Zdrojový kód Ukážkové slajdy v Markdowne vyzerá napríklad nasledovne:
title: httpd a Tomcat – loadbalancing a ladenie výkonu class: animation-fade layout: true --- # Forward Proxy - browser si nastaví proxy v prehliadači.</description>
    </item>
    
    <item>
      <title>Ťahák k počítačovým sieťam</title>
      <link>https://novotnyr.github.io/scrolls/tahak-k-pocitacovym-sietam/</link>
      <pubDate>Tue, 13 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/tahak-k-pocitacovym-sietam/</guid>
      <description>Prehľad L Vrstva Kýblik dát Adresácia Relevantné zariadenie Databáza L5-L7 Aplikačná Správa z nižších vrstiev L4 Transportná Segment Port Socket (softvérové) - L3 Sieťová / Network Datagram IP adresa Router Smerovacia tabuľka L2 Spojová / Data Link Rámec MAC adresa Switch Prepínacia tabuľka L1 Fyzická vrstva Nuly a jednotky - Hub - Internet Internet je sieť sietí:
postavená nad protokolom TCP/IP prepájaná metalickými káblami, optickými káblami a bezdrôtovo na okraji sú koncové zariadenia: počítače, mobily, smart televízory vo vnútri sú routery / smerovače, ktoré preposielajú dáta zo siete do siete Vrstvy protokolov na internete Internet komunikuje viacerými protokolmi na rozličných vrstvách:</description>
    </item>
    
    <item>
      <title>V jednej ruke CIDR, v druhej sekera – ako deliť siete</title>
      <link>https://novotnyr.github.io/scrolls/v-jednej-ruke-cidr-v-druhej-sekera-ako-delit-siete/</link>
      <pubDate>Sat, 10 Aug 2019 17:39:35 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/v-jednej-ruke-cidr-v-druhej-sekera-ako-delit-siete/</guid>
      <description>Ako rozdeliť sieť na podsiete? V letný podvečer zoberieme sekerku, sajder do ruky a počneme rozsekávať počítačovú sieť na podsiete.
ISO, osy a sieťový model Sieťová vrstva (network layer), alias tretia vrstva (L3) v ISO-OSI modeli vymieňa medzi stanicami instadatagramy s údajmi.
Každá stanica v sieti je na tejto vrstve identifikovaná IP adresou, čo je:
buď štvorica čísiel v rozsahu 0–255, napr. 158.197.31.35 alebo jej analogický binárny prepis: 10011110 11000101 00011111 00100011 Alebo ak ste Sandra Bullock v archívnom filme The Network, máte aj vyššie IP adresy.</description>
    </item>
    
    <item>
      <title>Elder Scrolls: TECO – Ozymandias medzi editormi</title>
      <link>https://novotnyr.github.io/scrolls/teco-ozymandias-medzi-editormi/</link>
      <pubDate>Wed, 07 Aug 2019 10:40:37 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/teco-ozymandias-medzi-editormi/</guid>
      <description>Som Ozymandias, všetkých kráľov kráľ.
Hľaď, mocný, zúfaj, vidiac moje dielo!
— Percy Bysshe Shelley: Ozymandias (1818)
WTF TECO TECO (tíkou, vzor Daewoo Tico) je azda najstarší ehm textový ehm editor.
Klasika od roku 1962.
Šialenstvo TECO: chvíľka pohodlnosti; útrapy do konca života.
— Wiki C2
Pozitívne vlastnosti:
stručné príkazy reprezentované jedným písmenom! podpora skriptov, ktoré možno verzovať v Gite! podpora pre makrá, veď ide o turingovsky úplný jazyk Veď ktorý editor vám vypíše čísla od 1 po 5 takto:</description>
    </item>
    
    <item>
      <title>Dockerized, loadbalanced, AJP-proxied Tomcats and HTTPD</title>
      <link>https://novotnyr.github.io/scrolls/httpd-tomcat-ajp-docker/</link>
      <pubDate>Sun, 04 Aug 2019 00:30:12 +0200</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/httpd-tomcat-ajp-docker/</guid>
      <description>In the demo, we show how one dockerized httpd loadbalances two dockerized Tomcats:
AJP is the loadbalancing protocol mod_proxy does the AJP proxying on the httpd side mod_proxy_balancer handles the loadbalancing on the httpd side Tomcat AJP connector handles the AJP protocol with httpd. A jvmRoute is dynamically configured on the Tomcat side to provide sticky sessions. See GitHub README for highly detailed description and tutorial.</description>
    </item>
    
    <item>
      <title>Maľujeme na plote, funkcie si v `gnuplot`-e</title>
      <link>https://novotnyr.github.io/scrolls/malujeme-na-plote-funkcie-si-v-gnuplot-e/</link>
      <pubDate>Mon, 22 Jul 2019 00:00:00 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/malujeme-na-plote-funkcie-si-v-gnuplot-e/</guid>
      <description>Čo je gnuplot? Ako uvádza FAQ (často kladené otázky), gnuplot je multiplatformový nástroj, ktorý umožňuje:
kreslenie dvoj- a viacrozmerných funkcií a bodov v rôznych štýloch výpočty nad celými, reálnymi a komplexnými číslami podporu veľkého množstva operačných systémov (Linux, Win32, Atari(!)&amp;hellip;) možnosť definícií vlastných funkcií a konštánt gnuplot je primárne nástrojom určeným pre príkazový riadok, ale existujú aj grafické užívateľské rozhrania (napr. pre X11, Win32, MacOS)
Stiahnutie pre platformy Windows Binárky pre gnuplot sú k dispozícii v podobe inštalátora z oficiálneho portálu na SourceForge.</description>
    </item>
    
    <item>
      <title>Návrhové vzory: Visitor</title>
      <link>https://novotnyr.github.io/scrolls/navrhove-vzory-vizitor/</link>
      <pubDate>Sun, 21 Jul 2019 12:00:00 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/navrhove-vzory-vizitor/</guid>
      <description>O návrhovom vzore Predstavuje operáciu, ktorá sa má vykonať na prvkoch objektovej štrultúry. Návštevník umožňuje definovať novú operáciu bez nutnosti zmeniť triedy prvkov, na ktorých bude operovať
— Gang of Four: Design Patterns (1994)
Účelom návrhového vzoru visitor (návštevník) je oddelenie dátovej štruktúry od operácie, ktorú chceme vykonávať na jej prvkoch.
Ak chceme prejsť prvky zoznamu a na každom z nich niečo spraviť. Ak chceme prejsť uzlami stromu s prehľadávaním do šírky a na každom z nich niečo spraviť.</description>
    </item>
    
    <item>
      <title>Dijkstrov algoritmus a krásna syntax Kotlinu</title>
      <link>https://novotnyr.github.io/scrolls/dijkstrov-algoritmus-a-krasna-syntax-kotlinu/</link>
      <pubDate>Fri, 19 Jul 2019 18:56:29 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/dijkstrov-algoritmus-a-krasna-syntax-kotlinu/</guid>
      <description>Dijkstrov algoritmus na hľadanie najkratšej cesty v neorientovanom grafe s nezápornými hranami je skvelá možnosť, ako si ukázať učebnicový grafový algoritmus… ale aj krásnu syntax Kotlinu.
Budeme potrebovať:
Reprezentáciu grafu: 1ks Funkciu na výpočet najväčšej vzdialenosti A korenie Reprezentácia uzlov Prevody medzi uzlami a číslami. Reprezentácia grafu Graf s uzlami a hranami má milión reprezentácií. My si zvolíme tú najhlúpejšiu: maticu incidencií. Ak máme dva uzly, U a V, do tabuľky na U-ty riadok a V-ty stĺpec uvedieme vzdialenosť medzi nimi.</description>
    </item>
    
    <item>
      <title>Elder Scrolls: editor `ed`</title>
      <link>https://novotnyr.github.io/scrolls/ed1-je-standardny-editor-komedia-v-troch-dejstvach/</link>
      <pubDate>Wed, 17 Jul 2019 09:09:39 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/ed1-je-standardny-editor-komedia-v-troch-dejstvach/</guid>
      <description>Ako píše @Bodil:
Dajme si teda ed.
Introitus Najprv ukážkový fajl:
printf &amp;#34;%s\n&amp;#34; Lorem ipsum dolor sit amet &amp;gt; lorem.txt Pome na to!
ed lorem.txt Uvidíme tretie najlepšie UI ever:
/tmp⟩ ed lorem.txt 27 ed je REPL. Akurát neni čas na blbosti ako prompt. Jediné, čo vidno, je 27, čo nie je zmysel života, ale počet znakov v súbore. Vrátane finálneho lomeno n na konci
Ako z toho preboha vybehnem?</description>
    </item>
    
    <item>
      <title>Postavme kotlinovský projekt cez Gradle v Kotline</title>
      <link>https://novotnyr.github.io/scrolls/postavme-kotlinovsky-projekt-v-gradle-cez-kotlin/</link>
      <pubDate>Tue, 16 Jul 2019 09:09:39 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/postavme-kotlinovsky-projekt-v-gradle-cez-kotlin/</guid>
      <description>Budovanie kotlinovských projektov Čo ak chceme vybudovať projekt, ktorého zdrojáky sú v Kotline a gradloidný build script je&amp;hellip; v Kotline? (Vložte yo-dawg-meme.png). Poďme na to!
V prvom rade potrebujeme deklarovať plugin, ktorý zapne podporu pre zostavovanie zdrojových kódov napísaných v Kotline. Do nového build scriptu uvedieme tri sekcie.
plugins { kotlin(&amp;#34;jvm&amp;#34;) version &amp;#34;1.3.41&amp;#34; } repositories { mavenCentral() } dependencies { implementation(kotlin(&amp;#34;stdlib&amp;#34;)) } plugins: sekcia plugins slúži na zavádzanie pluginov. A keďže kotlinovský build script je skvelý, použijeme špecifický zápis pre kotlinovské projekty.</description>
    </item>
    
    <item>
      <title>Strávte letnú sezónu zostavovaním projektov pomocou Kotlinu cez Gradle</title>
      <link>https://novotnyr.github.io/scrolls/stravte-letnu-sezonu-zostavovanim-projektov-pomocou-kotlinu-cez-gradle/</link>
      <pubDate>Mon, 15 Jul 2019 09:09:39 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/stravte-letnu-sezonu-zostavovanim-projektov-pomocou-kotlinu-cez-gradle/</guid>
      <description>Prečo Gradle a prečo Kotlin? Gradle je rokmi overený nástroj na zostavovanie projektov v Java ekosystéme. Samotné príkazy pre zostavenie boli od nepamätí písané v jazyku Gradle. Novým hitom je však Kotlin! Ukážme si, ako môžeme využiť tento jazyk na zostavovanie projektov.
Prvý gradlovský skript v Kotline Predpokladajme, že máme k dispozícii posledný Gradle, napríklad 5.5.1. V nejakom adresári si založme kotlinovský build script:
touch build.gradle.kts Vytvorme prvý task, teda príkaz, ktorý sa bude dať pomocou Gradle vykonať.</description>
    </item>
    
    <item>
      <title>Korutiny v Kotline</title>
      <link>https://novotnyr.github.io/scrolls/korutiny-v-kotline/</link>
      <pubDate>Mon, 08 Jul 2019 09:09:39 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/korutiny-v-kotline/</guid>
      <description>Korutiny v Kotline V bežnej Jave sa spúšťanie úloh na pozadí (teda paralelný beh úloh) dá dosiahnuť pomocou vlákien (threads). Tento mechanizmus však môže byť natoľko komplikovaný, že zaberie pol semestra vysvetľovania.
Kotlin ponúka alternatívu: korutiny / coroutines, ktoré majú viacero výhod:
elegantný zápis vďaka kombinácii syntaxe Kotlinu a knižnice pre korutiny sú škálovateľné: poľahky si môžeme pustiť státisíce korutín využívajú neblokujúcu filozofiu: keďže sa takmer nikde na nič nečaká, získame nesmierny výkon podporujú skladanie korutín cez štruktúrovanú konkurentnosť (structured concurrency).</description>
    </item>
    
    <item>
      <title>Mriežky v Androide cez GridLayout</title>
      <link>https://novotnyr.github.io/scrolls/mriezky-v-androide-cez-gridlayout/</link>
      <pubDate>Wed, 20 Feb 2019 09:09:39 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/mriezky-v-androide-cez-gridlayout/</guid>
      <description>Vlastné piškvorky v Androide si vyžadujú mriežku 3 x 3, ktorá zaberá celú obrazovku. Ako na to v Androide?
Máme viacero možnosti:
GridView: starý dobrý widget, ktorý zobrazí dáta z adaptéra v mriežke. Problémy? Neráta s tým, že widgety sa trafia “presne” do veľkosti obrazovky. Buď ich je málo a dole ostane vzduch, alebo priveľa a potom budeme scrollovať. Ale my nechceme scrollovateľné piškvorky. GridLayout: layout od čias API 14 (4.</description>
    </item>
    
    <item>
      <title>Nahrádzanie premenných v stringu v Springu</title>
      <link>https://novotnyr.github.io/scrolls/nahradzanie-premennych-v-retazci-v-springu/</link>
      <pubDate>Sun, 10 Feb 2019 14:06:56 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/nahradzanie-premennych-v-retazci-v-springu/</guid>
      <description>Spring má geniálne vymyslený systém properties, kde možno ukladať rozličné konfiguračné nastavenia v prostredí (Environment) a robiť s tým kdejaké finty. Čo keď však potrebujeme úplne hlúpu vec: nahradiť premenné v reťazci konkrétnymi namapovanými hodnotami?
Zoberme si reťazec:
http://${hostname}/${path} Zoberme si dve premenné — host s hodnotou localhost a path s hodnotou qofola.
Po nahradení by sme chceli získať krásnu URL:
http://localhost/qofola Spring! Trieda PropertyPlaceholderHelper síce nemá úplne ideálny názov, ale má dve základné metódy:</description>
    </item>
    
    <item>
      <title>Šesťdesiat vizitiek s ťahákmi k shellu</title>
      <link>https://novotnyr.github.io/scrolls/vizitkar-shellu/</link>
      <pubDate>Sun, 03 Feb 2019 18:56:29 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/vizitkar-shellu/</guid>
      <description>TLDR; ťaháky k shellu v tvare vizitiek 9x5cm sú zverejnené na GitHube.
Počas zimného semestra 2018/2019 bežal na PF UPJŠ kurz Seminár k operačným systémom, kde som vyučoval Powershell a Bash. Na začiatku každého shellového stretnutia som rozdal jeden A4kový handout, kde boli uverejnené syntaktické a príkazové nápovedy, ktoré sa mohli hodiť k danej téme.
Obsah z cvičení som následne preklopil z Wordu do LaTeXu a nasekal do formátu vizitiek 9x5cm.</description>
    </item>
    
    <item>
      <title>Mocking AMQP Integration tests with Apache Qpid</title>
      <link>https://novotnyr.github.io/scrolls/qpid-as-mocking-amqp-broker-for-integration-tests/</link>
      <pubDate>Wed, 23 Jan 2019 19:01:38 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/qpid-as-mocking-amqp-broker-for-integration-tests/</guid>
      <description>AMQP protocol is a useful mechanism to tackle cross-component integration features. When running integration tests, sometimes it’s useful to run integration tests without a full-fledged broker at hand. Especially, when RabbitMQ is an Erlang-based binary expected to run besides a Java-powered application.
Let’s use an alternative solution. Apache Qpid is a messaging solution and broker that is implemented in Java. In addition, it supports the following features:
Supports the AMQP 0.</description>
    </item>
    
    <item>
      <title>Saving Keystrokes with Live Templates in IntelliJ IDEA</title>
      <link>https://novotnyr.github.io/scrolls/saving-keystrokes-with-live-templates-in-intellij-idea/</link>
      <pubDate>Mon, 21 Jan 2019 12:31:44 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/saving-keystrokes-with-live-templates-in-intellij-idea/</guid>
      <description>Typing Code Over and Over? In one of the projects, we had to create many customized enumerations. Something like this:
public class Status { ONLINE(&amp;#34;on&amp;#34;), OFFLINE(&amp;#34;off&amp;#34;); } Each of this enum was supposed to have a findByCode method that would resolve “on” to ONLINE and “off” to offline. Something like this:
public enum Status { ONLINE(&amp;#34;on&amp;#34;), OFFLINE(&amp;#34;off&amp;#34;); private final String code; Status(String code) { this.code = code; } public static Status findByCode(String code) throws IllegalArgumentException { for (Status value : Status.</description>
    </item>
    
    <item>
      <title>Malá čokoládová REST aplikácia (List Milanovi)</title>
      <link>https://novotnyr.github.io/scrolls/mala-cokoladova-rest-aplikacia-list-milanovi/</link>
      <pubDate>Sun, 20 Jan 2019 14:06:56 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/mala-cokoladova-rest-aplikacia-list-milanovi/</guid>
      <description>Milý Milan, chcel si vedieť, ako vyzerá minimalistická RESTovská aplikácia postavená na aplikačnom rámci Spring Boot.
Tu je.
Predovšetkým, zíde sa ti Maven. Nielenže sa vysporiada so závislosťami v Springu, ale dá ti k dispozícii fajnový plugin pre Jetty, v ktorom bude spúšťanie servera vecou na 10 znakov.
Závislosti Začni teda POMkom, ktorý oddeď od rodičovského POM súboru a zároveň dodaj závislosť pre podporu webu a modulu Spring Web MVC.</description>
    </item>
    
    <item>
      <title>Enforcing Spring Cloud Contracts Over AMQP</title>
      <link>https://novotnyr.github.io/scrolls/enforcing-spring-cloud-contracts-over-amqp/</link>
      <pubDate>Fri, 18 Jan 2019 09:09:39 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/enforcing-spring-cloud-contracts-over-amqp/</guid>
      <description>Why Spring Cloud and CDC? The Spring Cloud Contract enforces Consumer Driven Contracts (CDC) in the services. While there are various examples of the HTTP integration, let’s focus on another scenario — enforcing contracts on messages in the AMQP protocol.
We will create a simple example where a producer will send a user presence message to a consumer. This message will be in the JSON format, send via pre-aggreed exchange.</description>
    </item>
    
    <item>
      <title>Veselice s `xargs`</title>
      <link>https://novotnyr.github.io/scrolls/veselice-s-xargs/</link>
      <pubDate>Sun, 13 Jan 2019 10:20:04 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/veselice-s-xargs/</guid>
      <description>Každý druhý článok o xargs sa začína v duchu „&amp;hellip; jedným z najpodceňovanejších príkazov Unixu je&amp;hellip;”. Tento nebude iný.
Mnohokrát sa stáva, že výstupom programu je niekoľko slov oddelených bielym miestom (napr. slová na samostatných riadkoch), ktoré chceme postupne jeden za druhým spracovávať a posielať ako parameter do iného programu. Niečo v duchu:
pre každé slovo R spracuj R Priamo for cyklus! V shellscriptingu je však for prekérny: vyžaduje totiž podivnú viacriadkovú syntax&amp;hellip; a komu sa chce kvôli jednoduchým jednorazovým veciam zakladať skripty, písať shebangy, chmodovať a patlať sa s editorom.</description>
    </item>
    
    <item>
      <title>Running MongoDB ReplicaSet on localhost</title>
      <link>https://novotnyr.github.io/scrolls/running-mongodb-replicaset-on-localhost/</link>
      <pubDate>Fri, 11 Jan 2019 08:58:04 +0000</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/running-mongodb-replicaset-on-localhost/</guid>
      <description>Setup Cluster Create Instances Create directories:
mkdir -p /tmp/mongodb/rs-{0,1,2} In shell, run:
mongod --dbpath /tmp/mongodb/rs-0 --replSet rs --port 27021 --bind_ip localhost --smallfiles --oplogSize 128 mongod --dbpath /tmp/mongodb/rs-1 --replSet rs --port 27022 --bind_ip localhost --smallfiles --oplogSize 128 mongod --dbpath /tmp/mongodb/rs-2 --replSet rs --port 27023 --bind_ip localhost --smallfiles --oplogSize 128 Initiate ReplicaSet Run client to initiate ReplicaSet:
mongo --port 27021 Create ReplicaSet configuration:
rs.initiate({ _id : &amp;#39;rs&amp;#39;, members: [ { _id : 0, host : &amp;#34;localhost:27021&amp;#34; }, { _id : 1, host : &amp;#34;localhost:27022&amp;#34; }, { _id : 2, host : &amp;#34;localhost:27023&amp;#34; } ] }) Review with:</description>
    </item>
    
    <item>
      <title>Tri skvelé tipy pre prácu s konzolou: bat, fzf, up</title>
      <link>https://novotnyr.github.io/scrolls/tri-skvele-tipy-pre-pracu-s-konzolou-bat-fzf-up/</link>
      <pubDate>Wed, 09 Jan 2019 10:20:04 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/tri-skvele-tipy-pre-pracu-s-konzolou-bat-fzf-up/</guid>
      <description>Na zimu sa treba zahriať pri termináli! Štyri utility v tom pomôžu:
bat — ako cat, ale s krídlami. up — interaktívny budovateľ a vyhodnocovateľ rúr, pájp, či kolón fzf — interaktívny fuzzy vyhľadávač všetkého — súborov, procesov a mnohého! Nástroje sú dostupné pre akýkoľvek linuxoidný operačný systém a pre každý shell.
cat s farbami cat je ako Lada — dokonalý už od začiatku: jednoducho vypľuje dáta z rúry / súboru bez zmeny.</description>
    </item>
    
    <item>
      <title>Tri veci pri práci s adresármi v termináli, ktoré robíte zle</title>
      <link>https://novotnyr.github.io/scrolls/tri-veci-pri-praci-s-adresarmi-ktore-robite-zle-exa-fd-ag/</link>
      <pubDate>Tue, 08 Jan 2019 07:44:08 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/tri-veci-pri-praci-s-adresarmi-ktore-robite-zle-exa-fd-ag/</guid>
      <description>Trojica ls, find a grep sa v linuxovom termináli používa každý deň. Nie vždy sú však pohodlné, veď poniektoré nástroje majú azda aj 50 rokov. Ukážme si moderné alternatívy pre nové milénium!
exa namiesto ls fd namiesto find ag namiesto find / grep Všetky nástroje fungujú krížom cez linuxové distribúcie i na MacOS.
exa - výpis adresára pre moderných ľudí brew install exa Príkaz exa je ako ls, ibaže je</description>
    </item>
    
    <item>
      <title>Spracovanie argumentov v shelli cez `getopts`</title>
      <link>https://novotnyr.github.io/scrolls/spracovanie-argumentov-cez-getopts/</link>
      <pubDate>Mon, 07 Jan 2019 07:44:08 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/spracovanie-argumentov-cez-getopts/</guid>
      <description>Načo je dobrý getops? getopts je posixový nástroj na spracovávanie prepínačov z príkazového riadka v rámci shellového skriptu. Vezmime si príklad:
./ffind.sh -s -t d java xml Príkaz ffind.sh dostal päť argumentov, ktoré v skutočnosti reprezentujú tri rozličné druhy “vstupov”:
-s teda prepínač -t reprezentujúci prepínač s parametrom (d) dva nepomenované argumenty java a xml Ak by sme mali takéto argumenty spracovávať ručne, bolo by to šialené. Príkaz getopts sa s tým vysporiada veľmi jednoducho.</description>
    </item>
    
    <item>
      <title>Urobme niečo s `make`</title>
      <link>https://novotnyr.github.io/scrolls/urobme-nieco-s-make/</link>
      <pubDate>Fri, 04 Jan 2019 14:57:45 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/urobme-nieco-s-make/</guid>
      <description>O make a makefile súboroch make zjednoduší zostavovanie súborov - teda kompilovanie, konverzie, či akékoľvek iné hromadné spracovanie súborov. Zostaviť binárku zo zdrojáku v Céčku? Vytvoriť PDF súbor v diplomovej práce v LaTeXu? Previesť markdownovské zdrojové súbory do HTML? To všetko make zvládne bez problémov.
A keďže už od nepamäti je súčasťou každého Linuxu, či dokonca MacOS, oplatí sa ho spoznať!
Jednoduché recepty, najmä pre céčkarov Recept: overenie, že make funguje make je naozaj všade!</description>
    </item>
    
    <item>
      <title>Materská škola JavaScriptu</title>
      <link>https://novotnyr.github.io/scrolls/materska-skola-javascriptu/</link>
      <pubDate>Thu, 11 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/materska-skola-javascriptu/</guid>
      <description>Prečo JavaScript JavaScript je mimoriadne perspektívny a populárny jazyk.
Je to hlavný programovací jazyk pre vývoj na webe. Všetky moderné webové prehliadače podporujú JavaScript. Podporuje vývoj na všetkých platformách: appky pre mobilné zariadenia, napr. cez React Native. serverové aplikácie, napr. cez Node.js desktopové aplikácie, napr. cez Electron Čo je vlastne JavaScript? JavaScript má rozličné verzie a pomenovania.
norma ECMAScript 2015 alias ES6. Moderná syntax, podporovaný v takmer všetkých moderných prehliadačoch. norma ECMAScript 3.</description>
    </item>
    
    <item>
      <title>Connect to LDAP server from Windows client via SSL</title>
      <link>https://novotnyr.github.io/scrolls/connect-to-ldap-server-from-windows-client-via-ssl/</link>
      <pubDate>Mon, 14 Sep 2015 16:20:00 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/connect-to-ldap-server-from-windows-client-via-ssl/</guid>
      <description>Connecting to LDAP server with SSL via client side may be difficult due to Windows peculiarities. How to ldapmodify the data?
Retrieve server certificate Locate the server certificate on the server in:
secure/certs/server.pem Extract the parts between and including
-----BEGIN CERTIFICATE----- ... -----END CERTIFICATE----- Store the certificate to the client machine to the c:/etc/ldap/server.pem.
Prepare client certificate Create c:/etc/ldap/ldap.conf with the following contents:
TLS_CACERT c:/etc/ldap/server.pem Set the location of client configuration file</description>
    </item>
    
    <item>
      <title>Letná škola sieťovania 2012</title>
      <link>https://novotnyr.github.io/talks/letna-skola-sietovania-2012/</link>
      <pubDate>Wed, 04 Jul 2012 12:56:00 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/talks/letna-skola-sietovania-2012/</guid>
      <description>Júl 2012, Danišovce, pre UINF PF UPJŠ
Prípravné práce Maven proxy settings &amp;lt;settings xmlns=&amp;#34;http://maven.apache.org/SETTINGS/1.0.0&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xsi:schemaLocation=&amp;#34;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&amp;#34;&amp;gt; &amp;lt;proxies&amp;gt; &amp;lt;proxy&amp;gt; &amp;lt;active&amp;gt;true&amp;lt;/active&amp;gt; &amp;lt;protocol&amp;gt;http&amp;lt;/protocol&amp;gt; &amp;lt;host&amp;gt;localhost&amp;lt;/host&amp;gt; &amp;lt;port&amp;gt;8787&amp;lt;/port&amp;gt; &amp;lt;/proxy&amp;gt; &amp;lt;/proxies&amp;gt; &amp;lt;/settings&amp;gt; Konfigurácia Jetty &amp;lt;build&amp;gt; &amp;lt;plugins&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.mortbay.jetty&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jetty-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;8.1.4.v20120524&amp;lt;/version&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;/plugins&amp;gt; &amp;lt;/build&amp;gt; Závislosť pre servlety &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;javax.servlet&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;javax.servlet-api&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.0.1&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; WAR &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;maven-war-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.2&amp;lt;/version&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;failOnMissingWebXml&amp;gt;false&amp;lt;/failOnMissingWebXml&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/plugin&amp;gt; Ukážkové JSP &amp;lt;%@ page language=&amp;#34;java&amp;#34; contentType=&amp;#34;text/html; charset=utf-8&amp;#34; pageEncoding=&amp;#34;utf-8&amp;#34;%&amp;gt; &amp;lt;%@ taglib prefix=&amp;#34;c&amp;#34; uri=&amp;#34;http://java.sun.com/jsp/jstl/core&amp;#34; %&amp;gt; </description>
    </item>
    
    <item>
      <title>Fronty, rady, zásobníky, fifá, lifá... v Jave</title>
      <link>https://novotnyr.github.io/scrolls/fronty-rady-zasobniky-fifa-lifa-v-jave/</link>
      <pubDate>Fri, 29 Jun 2012 22:10:01 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/fronty-rady-zasobniky-fifa-lifa-v-jave/</guid>
      <description>&lt;p&gt;Zásobníky a rady nie sú práve najčastejšie používanou dátovou štruktúrou Java aplikácií, ale z času na čas dôjde na i na ne. Ako ich elegantne a ľahko použiť bez toho, aby sme zabili kopu času ich reimplementáciou?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mounting the Camel: A stdin-stdout example</title>
      <link>https://novotnyr.github.io/scrolls/mounting-the-camel-a-stdin-stdout-example/</link>
      <pubDate>Tue, 14 Feb 2012 15:24:00 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/mounting-the-camel-a-stdin-stdout-example/</guid>
      <description>Setting up Camel via Maven Create a new project Within shell, move to your Eclipse workspace and create a new project.
mvn archetype:generate In the interactive mode, use the default archetype (press Enter) with latest version (press Enter), fill in the group ID (sk.upjs.ics.novotnyr), artifact ID (camel-xmpp-example) and use the default values for version and package.
A directory camel-xmpp-example·is created with a conventional subdirectory structure and a pom.xml.
Upgrade to JDK6 Camel is built upon JDK6.</description>
    </item>
    
    <item>
      <title>Programovací jazyk C (UINF/JAC) – 2011</title>
      <link>https://novotnyr.github.io/courses/programovaci-jazyk-c-jac-2011/</link>
      <pubDate>Fri, 25 Nov 2011 09:10:43 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/courses/programovaci-jazyk-c-jac-2011/</guid>
      <description>Inštalácia Nainštalujte Cygwin s balíčkami:
gcc
gcc-g+
make
gdb
Nový projekt v NetBeans Vytvorenie nového projektu v NetBeans Nechajte si spustiť prázdny projekt. Pozorujte zhody so syntaxou Javy - funkcia main(), direktívy #include ako analógia importov kučeravé zátvorky, dátové typy podobné Jave. Spustite prázdny projekt, aby ste overili, že prostredie funguje korektne. Okomentujeme, že funkcia main() musí vracať celé číslo – nula znamená, že program dobehol správne. Konštanta EXIT_SUCCESS má hodnotu 0.</description>
    </item>
    
    <item>
      <title>Maven, Jetty plug-in a spustenie SSL konektora</title>
      <link>https://novotnyr.github.io/scrolls/maven-jetty-ssl-connector/</link>
      <pubDate>Fri, 25 Nov 2011 08:20:57 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/maven-jetty-ssl-connector/</guid>
      <description>Problém Cieľ maven jetty:run v Mavene je veľmi užitočný na rýchle nasadenie webovej aplikácie do servletového kontajnera Jetty. V štandardom nastavení počúva Jetty na porte 8080... ale nepodporuje SSL.
Ako nastaviť pom.xml? Jetty v Mavene používa štandardne klasický konektor určený pre bežné nezabezpečené HTTP a SSL konektor ponecháva vypnutý. Ak chceme používať SSL, musíme v pom.xml explicitne zapnúť SSL konektor.
&amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.mortbay.jetty&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jetty-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;7.4.2.v20110526&amp;lt;/version&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;connectors&amp;gt; &amp;lt;connector implementation=&amp;#34;org.eclipse.jetty.server.ssl.SslSocketConnector&amp;#34;&amp;gt; &amp;lt;port&amp;gt;8443&amp;lt;/port&amp;gt; &amp;lt;maxIdleTime&amp;gt;60000&amp;lt;/maxIdleTime&amp;gt; &amp;lt;keystore&amp;gt;etc/jetty-ssl.</description>
    </item>
    
    <item>
      <title>Tvorba powershellových cmdletov v prostredí SharpDevelop</title>
      <link>https://novotnyr.github.io/scrolls/tvorba-cmdletov-v-sharpdeveloper/</link>
      <pubDate>Mon, 21 Nov 2011 17:51:08 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/tvorba-cmdletov-v-sharpdeveloper/</guid>
      <description>Prečo cmdlety? Skriptovacie možnosti PowerShellu sú dostatočne silné na to, aby bolo možné v jeho skriptovacom jazyku napísať takmer akúkoľvek činnosť. Existuje mnoho prípadov, keď namiesto komplikovaných skriptov chceme využiť svoje znalosti C# alebo iného programovacieho jazyka na platforme .NET a vyvinúť si vlastný cmdlet, ktorý realizuje jednu konkrétnu špecifickú úlohu. Náš kód sa v niektorých situáciách zjednoduší a sprehľadní.
V tomto tutoriále si ukážeme, ako možno vytvoriť vlastný jednoduchý cmdlet typu &amp;ldquo;Ahoj svet&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Programovanie, algoritmy, zložitosť 2011</title>
      <link>https://novotnyr.github.io/courses/programovanie-algoritmy-zlozitost-paz1c-2011/</link>
      <pubDate>Fri, 23 Sep 2011 12:56:00 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/courses/programovanie-algoritmy-zlozitost-paz1c-2011/</guid>
      <description>Prednášky Prednáška č. X Výučba sa nekonala (konferencia ITAT).
Prednáška č. 1 (23. septembra 2011) TBA
Prednáška č. 2 (6. októbra 2011) Zapúzdrenie (encapsulation) ako súčasť OOP. Triedy sú čierne skrinky. Kontrakty ako definície operácií. ČO je často dôležitejšie než ako. Ukážka kontraktu na triede RodnéČíslo. Unit testy ako zaistenie funkcionality a podpora refaktoru. Úvod do JUnit.
Slajdy: PDF
Zdrojové kódy z prednášky: Rodné číslo (SVN)
Prednáška č. X (13. októbra 2011) Prednáška sa nekonala (konferencia).</description>
    </item>
    
    <item>
      <title>Seminár k operačným systémom 2011</title>
      <link>https://novotnyr.github.io/courses/seminar-z-operacnych-systemov-oss1a-2011/</link>
      <pubDate>Thu, 15 Sep 2011 19:30:01 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/courses/seminar-z-operacnych-systemov-oss1a-2011/</guid>
      <description>Semester: zimný
Rok: 2011
Zadania Zadanie je potrebné poslať mailom do 6. 2. 2012 23:59.
Zadania k Powershellu Vytvorte skript v PowerShelli, ktorý vytvorí sumárnu informáciu o aktuálnom stroji. V sumárnej informácii uveďte nasledovné informácie.
Názov aktuálneho stroja Veľkosť nainštalovanej pamäte RAM MAC adresy sieťových adaptérov IP adresu v aktuálne pripojenej sieti Počet fyzických diskov Všetky logické jednotky a ich veľkosti. Zoznam používateľov aktuálneho stroja Pre každého používateľa veľkosť jeho domovského adresára a cestu k nemu.</description>
    </item>
    
    <item>
      <title>DocBook – receptár tipov a trikov</title>
      <link>https://novotnyr.github.io/scrolls/docbook-recepty/</link>
      <pubDate>Mon, 21 Mar 2011 00:00:00 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/docbook-recepty/</guid>
      <description>Ako editovať DocBook? XMLMind XML Editor podporuje tvorbu dokumentov vo formáte DocBook (a tiež DITA či XHTML) vo WYSIWYG podobe. Pre nekomerčné použitie je zadarmo, i keď oproti profesionálnej verzii neobsahuje zabudované nástroje pre transformácie dokumentov.
Odkiaľ získať XSLT šablóny? Najlepšie z projektových stránok na SourceForge.
Šablóny stiahnite a rozbaľte do vhodného adresára (napr. C:\Programs\docbook-xslt).
Ako rozbehať transformácie s xsltproc? Knižnica xmlib je pôvodne knižnica pre spracovanie XML určená pôvodne pre prostredie GNOME.</description>
    </item>
    
    <item>
      <title>Netbeans, Ubuntu a GTK vývoj</title>
      <link>https://novotnyr.github.io/scrolls/netbeans-ubuntu-gtk/</link>
      <pubDate>Sat, 19 Mar 2011 19:59:44 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/netbeans-ubuntu-gtk/</guid>
      <description> nainštalovať vývojárske knižnice apt-get install libgtk2.0-dev nastaviť projekt: Project Properties | Build | C Compiler. V sekcii General uviesť do Additional Options: `pkg-config --cflags gtk+-2.0` `pkg-config --libs gtk+-2.0` Nezabudnúť na spätné apostrofy (backticks). V prípade chyby skontrolujte, či pkg-config funguje z terminálu. Na Ubuntu 10.10 vráti napr.
-pthread -I/usr/include/gtk-2.0 -I/usr/lib/gtk-2.0/include \ -I/usr/include/atk-1.0 -I/usr/include/cairo \ -I/usr/include/gdk-pixbuf-2.0 -I/usr/include/pango-1.0 \ -I/usr/include/gio-unix-2.0/ \ -I/usr/include/glib-2.0 \ -I/usr/lib/glib-2.0/include \ -I/usr/include/pixman-1 -I/usr/include/freetype2 \ -I/usr/include/libpng12 V Tools | Options | C/C++ na karte Code Assistance nastaviť pre vhodnú Tool Collection (štandardne GNU) na karte C Compiler bonusový Include adresár: /usr/include </description>
    </item>
    
    <item>
      <title>Ruby on Rails - Zapomeňte na Javu</title>
      <link>https://novotnyr.github.io/scrolls/ruby-on-rails-zapomente-na-javu/</link>
      <pubDate>Mon, 28 Feb 2011 23:44:14 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/ruby-on-rails-zapomente-na-javu/</guid>
      <description>Oznam o konání: http://java.cz/article/czjug-oauth-ror Datum: 28. 2. 2011 Záznam: http://www.youtube.com/watch?v=eOdSO1sk3mA Přednáší: Jiří Hradil, Kyberia Slajdy: http://www.java.cz/dwn/1003/38153_ruby_on_rails_zapomente_na_javu.pdf Blog http://www.hradil.org/czjug-ruby-on-rails-zapomente-na-javu/ (Mezititulky RN)
Přepis Úvod Dobrý večer a dobrou chuť, mé jméno je Jiří Hradil. Jsem ze společnosti Kyberie a dnes bych vám rád prezentoval přednášku na téma Ruby on Rails – Zapomeňte na Javu. Proč jsem si dovolil přijít na CZJUG a říkat, že máte zapomenout na Javu? Důvod je prostý: chtěl jsem, aby vás přišlo co nejvíc a abych rozpoutal diskusi na toto téma, protože z mého pohledu Java či spíše její komunita v České republice už není to, co dřív bývalo.</description>
    </item>
    
    <item>
      <title>Systémové programovanie (UINF/SPR1b) 2011</title>
      <link>https://novotnyr.github.io/courses/systemove-programovanie-spr1b-2011/</link>
      <pubDate>Tue, 15 Feb 2011 19:59:44 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/courses/systemove-programovanie-spr1b-2011/</guid>
      <description>Sumár Prednáška: utorok, 8.55, P10
Praktické cvičenie: streda, 15:00, P7
Prednášky 15. 2. 2011 Prezentácia PDF
Procesy, fork/exec, ps, kill. Zombie procesy, wait()
22. 2. 2011 Bash skripting. Základné princípy, programové štruktúry. Premenné. Expanzia premenných. Spúšťanie procesov.
1. 3. 2011 Prezentácia PDF
Procesy, fork/exec, ps, kill. Zombie procesy, wait()
8. 3. 2011 Prezentácia PDF
Atribúty vlákna. Kritické sekcie. Race conditions. Mutexy ako metóda prístupu k zdieľaným dátam. Druhy mutexov v UNIXe.</description>
    </item>
    
    <item>
      <title>Systémové programovanie 2010</title>
      <link>https://novotnyr.github.io/courses/systemove-programovanie-spr1a-2010/</link>
      <pubDate>Tue, 14 Dec 2010 02:20:34 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/courses/systemove-programovanie-spr1a-2010/</guid>
      <description>Prednášky Prvá prednáška Powershell
Druhá prednáška Powershell
Tretia prednáška (5. 10. 2010) Powershell
Štvrtá prednáška (12. 10. 2010) Úvod do C#
Piata prednáška (19. 10. 2010) Windows Messages ako spôsob výmeny správ
Šiesta prednáška (26. 10. 2010) Mechanizmy inter-process communication (IPC) vo Windowse
Siedma prednáška (2. 11. 2010) Vývoj vlastných cmdletov v C#
ukážka zdrojového kódu z prednášky
Prednáška č. 8 (9. 11. 2010) Úvod do jazyka C
Prednáška č. 9 (16.</description>
    </item>
    
    <item>
      <title>Objektovo-orientované programovanie 2010</title>
      <link>https://novotnyr.github.io/courses/objektovo-orientovane-programovanie-oop1a-2009/</link>
      <pubDate>Thu, 23 Sep 2010 12:56:00 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/courses/objektovo-orientovane-programovanie-oop1a-2009/</guid>
      <description>Inštrukcie cvičenie pre informatikov sa koná v utorky od 13.00 v P3 cvičenie pre medziodborové kombinácie sa koná vo štvrtky s RNDr. Tomášom Horváthom Cvičenia Cvičenie 1 (24. 2. 2009) PDF Triedy ako služby, triedy ako entity. Návrh minimalistického systému. Použitie interfejsov a ukážka polymorfizmu.
Cvičenie 2 (3. 3. 2009) PDF Refaktor ukážkového kódu. Unit testy. Logovanie. Príklad a smerovanie k dependency injection.
Cvičenie 3 (10. 3. 2009) Projekt, z ktorého vychádzame PDF prezentácia Spring ako príklad kontajnera pre dependency injection.</description>
    </item>
    
    <item>
      <title>Programovanie, algoritmy, zložitosť 2010</title>
      <link>https://novotnyr.github.io/courses/programovanie-algoritmy-zlozitost-paz1c-2010/</link>
      <pubDate>Thu, 23 Sep 2010 12:56:00 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/courses/programovanie-algoritmy-zlozitost-paz1c-2010/</guid>
      <description>Teoretické cvičenia Cvičenie 1 - 29. 9. 2010 Úvod, triedy. Od návrhu k implementácii &amp;ndash; príklad univerzálneho Turingovho stroja
PDF
Cvičenie 2 - 6. 10. 2010 Swing ako aplikačný rámec pre vývoj softvéru. Princípy, komponenty, modely, udalosti. PDF
Cvičenie 3 - 13. 10. 2010 Správanie ako základ pre štruktúru tried. Kontrakty a ich reprezentácia interfejsmi.
PDF
Cvičenie 4 - 20. 10. 2010 Dedičnosť, kompozícia a delegácia: príklady použitia
PDF
zdrojový kód</description>
    </item>
    
    <item>
      <title>Mule – receptár tipov a trikov</title>
      <link>https://novotnyr.github.io/scrolls/mule-receptar-tipy-triky/</link>
      <pubDate>Fri, 04 Jun 2010 10:49:10 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/mule-receptar-tipy-triky/</guid>
      <description>Práca s payloadom expressiony typu jxpath a bean pracujú štandardne nad samotným payloadom, vyhodnocovanie sa deje nad payloadom terminológia: Mule: message property, HTTP: message header Pridanie CRLF Al chceme pridať do správy CR-LF pomocou StringAppenderTransformera, stačí do XML použiť &amp;amp;#010;
Získanie obsahu payloadu V MessagePayloadExpressionEvaluator: ak sa vynecha expression
#[payload:] (pozor na dvojbodku!) vrati sa obsah payloadu
Outbound HTTP a telo správy GET HTTP Ak používame HTTP outbound, telo správy sa pridá za GET parameter body:</description>
    </item>
    
    <item>
      <title>O spravodlivom podelení lupu v Pythone</title>
      <link>https://novotnyr.github.io/scrolls/o-spravodlivom-podeleni-lupu-v-pythone/</link>
      <pubDate>Tue, 20 Apr 2010 00:00:00 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/o-spravodlivom-podeleni-lupu-v-pythone/</guid>
      <description>Dvom lupičom sa podarilo uchmatnúť si n zlatých tehličiek. Tehličky majú rôzne váhy. Váha každej tehličky je kladné nenulové reálne číslo (napr. v kilogramoch). Po akcii majú v pláne spravodlivo sa rozdeliť a potom sa čo najskôr rozísť. Polícia je im však v pätách a tak nemajú čas krájať tehličky, aby sa podelili presne na polovicu (hmotnosť je priamo úmerná cene). Nájdite čo najspravodlivejšie rozdelenie lupu (s minimálnym rozdielom váh).</description>
    </item>
    
    <item>
      <title>Python – čriepky</title>
      <link>https://novotnyr.github.io/scrolls/python-criepky/</link>
      <pubDate>Thu, 15 Apr 2010 19:59:44 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/python-criepky/</guid>
      <description>Kalkulačka 2 + 2 4 Kalkulačka - celočíselné delenie 3 / 2 1 Kalkulačka - delenie reálnych čísiel 3.0 / 2 1.5 Kalkulačka - mocnina 10 ** 2 pow(10, 2) 100 Maximum čísiel max(4, 5, 3, 5, 7, 20) 20 Minimum čísiel min(4, 5, 3, 5, 7, 20) 20 Premenné Python je dynamicky typovaný: dátové typy netreba uvádzať, každá premenná má však exaktný typ
dph = 19 1000 * (dph / 100.</description>
    </item>
    
    <item>
      <title>Inštalácia SVN pod Linuxom</title>
      <link>https://novotnyr.github.io/scrolls/instalacia-svn-pod-linuxom/</link>
      <pubDate>Thu, 18 Mar 2010 23:54:45 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/instalacia-svn-pod-linuxom/</guid>
      <description>Inštalácia pod Linuxom [svnserve] Pridat do /etc/services: svnserve 3690/tcp # Subversion svnserve svnserve 3690/udp # Subversion svnserve pridat do /etc/xinetd.d/svnserve 1. default: on 1. Subversion server service svnserve { socket_type = stream protocol = tcp user = svn wait = no disable = no server = /usr/local/bin/svnserve server_args = -i port = 3690 } nastavit firewall (vo Fedore): v subore /etc/rc.d/rc.firewall uviest 1. open SVN port /sbin/iptables -A INPUT -j ACCEPT -p tcp --dport 3690 Pozor na pravidla, ktore sa vyhodnocuju zhora nadol!</description>
    </item>
    
    <item>
      <title>Interfejsy ako spôsob nahrádzania kódu</title>
      <link>https://novotnyr.github.io/scrolls/interfejsy-ako-sposob-nahradzania-kodu/</link>
      <pubDate>Thu, 25 Feb 2010 16:08:05 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/interfejsy-ako-sposob-nahradzania-kodu/</guid>
      <description>Súbory v Jave sú zložité! Ak ste niekedy programovali v Pascale, iste ste si pamätali veľmi jednoduchý spôsob, ako načítavať riadky z textového súboru. Jedným volaním procedúry ste asociovali premennú so súborom, druhým ho otvorili na čítanie a vo while-cykle načítavali dáta pomocou starej známej funkcie readln(). Hja, procedurálne programovanie malo niekedy svoje výhody. V Jave je práca so súbormi o niečo komplikovanejšia – veď len triviálny príklad vyzerá nasledovne:</description>
    </item>
    
    <item>
      <title>Generovanie mailov z excelovského súboru pomocou POI a Freemarker-a</title>
      <link>https://novotnyr.github.io/scrolls/generovanie-mailov-z-excelovskeho-suboru-pomocou-poi-a-freemarker/</link>
      <pubDate>Tue, 23 Feb 2010 00:00:52 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/generovanie-mailov-z-excelovskeho-suboru-pomocou-poi-a-freemarker/</guid>
      <description>Problém? Na istú nemenovanú konferenciu bolo v istú chvíľu upozorniť autorov, že sa blíži termín pre splnenie určitých povinností. Každý z autorov článku mal splniť niekoľko náležitostí, napr.:
zaslanie registračného formulára rezervácia hotela zaslanie článku zaplatenie konferenčného poplatku. Údaje o autoroch sa nachádzali v excelovskom súbore, kde sa na druhom liste nachádzala tabuľka obsahujúca po riadkoch meno autora. V ďalších štyroch bunkách na riadku boli postupne uvedené nuly alebo jednotky, ktoré indikovali splnenie príslušnej povinnosti.</description>
    </item>
    
    <item>
      <title>Sémantický web (UINF/SWB) – 2010–2014</title>
      <link>https://novotnyr.github.io/courses/semanticky-web-swb-2011/</link>
      <pubDate>Mon, 22 Feb 2010 18:04:46 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/courses/semanticky-web-swb-2011/</guid>
      <description>Základné informácie Kód predmetu: ÚINF/SWB/10
Počet kreditov: 4
Vyučujúci:
RNDr. Peter Gurský, PhD RNDr. Róbert Novotný Rozvrh:
utorok, 9:50 &amp;ndash; 12:25, P/7 Realizované cvičenia Sémantický web a motivácia, oblasti, problémy, vízie. Prezentácia: The Semantic Web Vision zo SWP. Štruktúrované webové dokumenty a XML Prezentácia Structured Web Documents in XML zo SWP Článok XML a menné priestory Článok Transformácie XML Článok XPath Nástroje Online XSL Tools XPath Testbed FirePath &amp;ndash; rozšírenie pre Firefox.</description>
    </item>
    
    <item>
      <title>Softvérový projekt (UINF/PRJ1a) – 2010</title>
      <link>https://novotnyr.github.io/courses/softverovy-projekt-prj1a-2010/</link>
      <pubDate>Mon, 22 Feb 2010 18:04:46 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/courses/softverovy-projekt-prj1a-2010/</guid>
      <description>Harmonogram pondelok, 11.40, P3 streda, 8.00, P7 Kalendár prednášok zabezpečovaných RWE Agile/Scrum (R. Šoffa) Dátum: 22.2.2010 Prezentácia PPT Projektový manažment (J. Vojtko) Dátum: 8.3.2010 [Prezentácia PDF](Uvod do projektoveho manazmentu.pdf ) JavaServer Faces (R. Šoffa) Dátum: 29.3.2010 Testovanie (J. Vojtko) Dátum: 12.4.2010 Zoznam projektov Prekladový kľúč http://repo.ics.upjs.sk/svn/sw-projekty-2010/kluc/ ITAT - účastníci konferencie http://repo.ics.upjs.sk/svn/sw-projekty-2010/itat/ Elektronické študijné materiály Multimed http://repo.ics.upjs.sk/svn/sw-projekty-2010/multimed/ Online Poker http://repo.ics.upjs.sk/svn/sw-projekty-2010/poker/ Cvičenie 1 (15. 2. 2010) Dohovor a organizačné pokyny
Cvičenie 2 (17.</description>
    </item>
    
    <item>
      <title>Automatická kontrola pravopisu v textovom poli v Swingu</title>
      <link>https://novotnyr.github.io/scrolls/automaticka-kontrola-pravopisu-textfield-swing/</link>
      <pubDate>Tue, 16 Feb 2010 00:00:52 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/automaticka-kontrola-pravopisu-textfield-swing/</guid>
      <description>Úvod Na príklade automatickej kontroly pravopisu v swingovskom textovom políčku sa dá ukázať množstvo zaujímavých vecí: automatické vyhľadávanie medzier medzi slovami, vlákna v Swingu ba i podporu pre zvýrazňovanie textu. Vytvorme si teda jednoduchú aplikáciu s textovým políčkom, kde môže používateľ zadávať text, a v prípade, že je nekorektný, mu ho aplikácia zvýrazní červenou farbou.
Delenie textu na slová Mnohokrát sa stáva, že pre daný reťazec potrebujeme nájsť pozície medzier (hraníc) medzi slovami.</description>
    </item>
    
    <item>
      <title>Thinlet – rýchly vývoj jednoduchých GUI v Jave</title>
      <link>https://novotnyr.github.io/scrolls/thinlet-rychly-vyvoj-jednoduchych-gui-v-jave/</link>
      <pubDate>Sun, 14 Feb 2010 00:00:00 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/thinlet-rychly-vyvoj-jednoduchych-gui-v-jave/</guid>
      <description>Úvod „Okienkové“ aplikácie síce netvoria dominantu javovských projektov. Klasickou voľbou je použitie knižnice Swing (zabudovanej v Jave) či SWT (od IBM). Obe knižnice sú dostatočne stabilné a tešia sa širokej podpore a používaniu.
Jednou z ich typických charakteristík je definícia používateľského rozhrania priamo v kóde. Niekedy v roku 2005 však vznikla vlna projektov, ktorá pristupovala k implementácii grafických rozhraní odlišným spôsobom. Samotné používateľské rozhranie je definované v XML súboroch, a Java kód len definuje samotnú funkcionalitu a príslušnú obslužnú logiku.</description>
    </item>
    
    <item>
      <title>Spring 3.0, JEE 6 a anotácie pre automatické prepájanie komponentov</title>
      <link>https://novotnyr.github.io/scrolls/spring-java-ee-anotacie-pre-automaticke-prepajanie-komponentov/</link>
      <pubDate>Mon, 11 Jan 2010 22:50:33 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/spring-java-ee-anotacie-pre-automaticke-prepajanie-komponentov/</guid>
      <description>Od čias Springu 2.5 je k dispozícii sada anotácií, ktoré riešia dependency injection. (Viď existujúci článok.) V nej boli dané k dispozícii jednak springovské anotácie (@Component a pod.) a jednak anotácie z JSR-250 (najmä @Resource).
Od tých čias sa situácia ešte „skomplikovala&amp;quot;. Medzičasom totiž vyšla finálna špecifikácia JEE6, ktorá rieši dependency injection v rámci dvoch JSR.
JSR-330: Dependency Injection for Java vznikla z potrieb DI frameworkov Spring a Google Guice, kde dali hlavy dohromady Rod Johnson a Crazy Bob Lee.</description>
    </item>
    
    <item>
      <title>Swing a vláknové programovanie</title>
      <link>https://novotnyr.github.io/scrolls/swing-threads-a-vlaknove-programovanie/</link>
      <pubDate>Mon, 14 Dec 2009 09:24:38 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/swing-threads-a-vlaknove-programovanie/</guid>
      <description>Úvod Jednou zo základných požiadaviek používateľského rozhrania je jeho responsiveness, teda včasná a rýchla reakcia na používateľov vstup (teda zadávanie z klávesnice, kliky myšou atď.) Rozhranie, ktoré nedokáže reagovať včas, používateľa frustruje, pretože tempo svojej práce musí prispôsobovať počítaču a začne mať dojem, že program ho v práci zdržuje. Včas reagujúce používateľské rozhranie by malo spĺňať nasledovné požiadavky:
umožniť používateľovi vidieť aktuálny stav aplikácie dať na vedomie, že jeho vstup bol prijatý v prípade, že aplikácia rieši dlhotrvajúcu úlohu, dávať na známosť priebežný stav a nebudiť dojem, že zamrzla ovplyvňovať beh programu (zatvoriť ho, pozastaviť atď.</description>
    </item>
    
    <item>
      <title>Programovanie, algoritmy, zložitosť 2009</title>
      <link>https://novotnyr.github.io/courses/programovanie-algoritmy-zlozitost-paz1c-2009/</link>
      <pubDate>Wed, 23 Sep 2009 12:56:00 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/courses/programovanie-algoritmy-zlozitost-paz1c-2009/</guid>
      <description>Oznamy Vo štvrtok je 5. 11. 2009 je prvý test! Podmienky na zápočet sú uvedené v prvej prezentácii. Každý študent je povinný byť na práve jednom praktickom cvičení a na teoretickom cvičení Úvod a podmienky na zápočet teoretické cvičenie - streda, 18.05, P11 cvičenie pri počítačoch streda, 10.45, P3 streda, 12.35, P3 podmienky na zápočet účasť na praktických cvičeniach (30%) záverečný projekt (40%) - nutná podmienka dva testy: jeden v polovici semestra, druhý na konci (30%) jedna možnosť opravy jedného testu Teoretické cvičenia Cvičenie 1 (23.</description>
    </item>
    
    <item>
      <title>Ako porozumieť dependency injection v Springu</title>
      <link>https://novotnyr.github.io/scrolls/ako-porozumiet-dependency-injection-v-spring/</link>
      <pubDate>Mon, 31 Aug 2009 15:45:22 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/ako-porozumiet-dependency-injection-v-spring/</guid>
      <description>Úvod Ak ste niekedy chceli vlastniť svoj vlastný bar, máte príležitosť. V tomto príklade si totiž jeden navrhneme. Na tomto príklade si ukážeme použitie návrhového vzoru dependency injection (vkladanie závislostí), filozofie inversion of control (prevráteného riadenia) a jeho použitie v aplikačnom rámci Spring.
Jednoduchý bar Predstavme si, že na začiatku podnikateľskej kariéry bude bar podávať iba fľaškové pivo. Ak by sme to namodelovali v Jave, vzišla by z toho nasledovné triedy.</description>
    </item>
    
    <item>
      <title>MySQL – receptár, tipy a triky</title>
      <link>https://novotnyr.github.io/scrolls/mysqldb-receptar-tipy-triky/</link>
      <pubDate>Sun, 26 Jul 2009 00:00:00 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/mysqldb-receptar-tipy-triky/</guid>
      <description>Zmena znakovej sady pre databazu alter database xxxxx character set cp1250 Pripojenie k databaze so specifikovanim znakovej sady pre klienta &amp;#34;c:\Program Files\MySQL\MySQL Server 4.1\bin\mysql&amp;#34; -u oldelfinnphpBB -p --default-character-set=cp1250 Import CSV súboru z Excelu mysqlimport.exe -u root -p --fields-terminated-by=; --fields-optionally-enclosed-by=\&amp;#34; davano post.txt Dátumy by mali byť v tvare akceptovateľnom funkciou DATETIME(), napr. YYYY-MM-DD HH:mm)
Zistenie znakovej sady tabuľky show table status from hotels like &amp;#39;hotel_reservations&amp;#39; Vypíše info o tabuľke hotel_reservations v databáze hotels.</description>
    </item>
    
    <item>
      <title>Používame Spring Web Services</title>
      <link>https://novotnyr.github.io/scrolls/pouzivame-spring-ws/</link>
      <pubDate>Tue, 23 Jun 2009 00:00:00 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/pouzivame-spring-ws/</guid>
      <description>package sk.novotnyr.movie; import java.util.Date; public class MovieReservation { protected String title; protected Date date; protected int numberOfTickets; // gettre a settre } Stiahneme Spring-WS. Do classpath:
activation.jar commons-logging-1.1.1.jar log4j-1.2.15.jar saaj-api-1.3.jar saaj-impl-1.3.jar spring-web.jar spring-webmvc.jar spring-ws-1.5.2.jar spring.jar stax-api-1.0.1.jar xstream-1.3.jar Kostra webovej aplikácie: web.xml
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;web-app xmlns=&amp;#34;http://java.sun.com/xml/ns/j2ee&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xsi:schemaLocation=&amp;#34;http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd&amp;#34; version=&amp;#34;2.4&amp;#34;&amp;gt; &amp;lt;servlet&amp;gt; &amp;lt;servlet-name&amp;gt;spring-ws&amp;lt;/servlet-name&amp;gt; &amp;lt;servlet-class&amp;gt;org.springframework.ws.transport.http.MessageDispatcherServlet&amp;lt;/servlet-class&amp;gt; &amp;lt;/servlet&amp;gt; &amp;lt;servlet-mapping&amp;gt; &amp;lt;servlet-name&amp;gt;spring-ws&amp;lt;/servlet-name&amp;gt; &amp;lt;url-pattern&amp;gt;/*&amp;lt;/url-pattern&amp;gt; &amp;lt;/servlet-mapping&amp;gt; &amp;lt;/web-app&amp;gt; spring-ws-servlet.xml
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd&amp;#34;&amp;gt; &amp;lt;bean id=&amp;#34;movieReservationEndpoint&amp;#34; class=&amp;#34;sk.</description>
    </item>
    
    <item>
      <title>Tutoriál k JPA</title>
      <link>https://novotnyr.github.io/tomes/tutorial-k-jpa/</link>
      <pubDate>Wed, 08 Apr 2009 09:24:38 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/tomes/tutorial-k-jpa/</guid>
      <description>O tutoriále Java Persistence API je špecifikácia, ktorá sa snaží štandardizovať objektovo-relačné mapovanie (teda mapovanie objektov na databázové tabuľky. V súčasnosti už jestvuje dostatočný počet implementácií (Hibernate, TopLink, Kodo atď). Tutoriál prináša popis základných tried, filozofie práce a značné množstvo príkladov pre použitie JPA (v implementácii Hibernate) v aplikáciách.
Tutoriál vznikol ako voľný preklad pôvodných tutoriálov Garyho Maka k používaniu Hibernate. Tutoriál však bol značne prepracovaný a príklady boli prispôsobené všeobecnej špecifikácii.</description>
    </item>
    
    <item>
      <title>Spring MVC 2.5</title>
      <link>https://novotnyr.github.io/slides/spring-mvc-2-5/</link>
      <pubDate>Thu, 02 Apr 2009 17:51:08 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/slides/spring-mvc-2-5/</guid>
      <description>Spring MVC 2.5 je aplikačný rámec pre vývoj webových aplikácií založený na princípoch Springu, konfigurácii založenej na konvenciách a anotáciách.
V prezentácii ukazujeme základnú filozofiu aplikačného rámca spolu s ukážkami kódov.
Prezentácia (PDF, 8MB) Poďakovanie patrí ľuďom z predmetu ÚINF/OOP1a za rady a pripomienky.</description>
    </item>
    
    <item>
      <title>Tutoriál k Hibernate</title>
      <link>https://novotnyr.github.io/tomes/tutorial-k-hibernate/</link>
      <pubDate>Tue, 31 Mar 2009 09:24:38 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/tomes/tutorial-k-hibernate/</guid>
      <description>O čom to je? Hibernate je de facto štandardom pre implementáciu objektovo-relačného mapovania (ORM) v Jave. Gary Mak zverejnil v roku 2006 sériu článkov, ktorá obsiahlym a vyčerpávajúcim spôsobom ukazuje základnú filozofiu Hibernate a princípy ORM a na praktických príkladoch ukazuje typické postupy mapovania a použitie v Java kóde.
Vyše sto strán užitočných informácií, ktoré sú voľne k dispozícii v zrozumiteľnom jazyku, si môžete stiahnuť v PDF formáte.
Stiahnuť Používame Hibernate, slovenský preklad, PDF</description>
    </item>
    
    <item>
      <title>Ako nakonfigurovať Jetty v Java kóde</title>
      <link>https://novotnyr.github.io/scrolls/ako-nakonfigurovat-jetty-v-java-kode/</link>
      <pubDate>Sat, 21 Mar 2009 10:49:10 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/ako-nakonfigurovat-jetty-v-java-kode/</guid>
      <description>Poznámka k aktuálnosti Nasledovné údaje sú platné pre Jetty verzie 6 a 7. Existuje verzia pre Jetty 9 s mnohými zmenami!
Úvod Servletový kontajner Jetty má oproti ostatným riešeniam výhodu v ľahkom embeddovaní, čiže použití ako súčasti inej aplikácie. To zároveň znamená, že ho možno veľmi jednoducho nakonfigurovať v Java kóde a spúšťať priamo z našich aplikácií.
To sa mi napríklad osvedčilo pri demonštrovaní a školení rôznych webových frameworkov, kde nie je nutné predstavovať a vysvetľovať nasadzovanie webových aplikácií hneď na začiatku práce s nimi.</description>
    </item>
    
    <item>
      <title>Exago</title>
      <link>https://novotnyr.github.io/scrolls/exago/</link>
      <pubDate>Wed, 04 Mar 2009 17:51:08 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/exago/</guid>
      <description>Inštalácia Exago je implementované ako rozšírenie (extension) pre Firefox 3.0 a novší. Inštaláciu realizujeme ako v každom inom rozšírení.
Navštívením adresy rozšírenia vo Firefoxe, potvrdením inštalácie a reštartovaním Firefoxu.
Po inštalácii si zapneme z hlavného menu View | Sidebar | Exago Sidebar. Vľavo sa zobrazí lišta s užívateľským rozhraním.
Nastavenie servera Údaje o anotovaných stránkach sa odosielajú na server. Konfiguráciu realizujeme pomocou tlačidla Settings. Uvedieme
prihlasovacie meno (používa sa pri identifikácii anotátora) heslo (v súčasnej verzii nepoužívané) server: hodnota má byť http://dbserver.</description>
    </item>
    
    <item>
      <title>Vlákna / Threads a problém producent-konzument</title>
      <link>https://novotnyr.github.io/slides/threads-vlakna-problem-producent-konzument/</link>
      <pubDate>Fri, 20 Feb 2009 16:08:05 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/slides/threads-vlakna-problem-producent-konzument/</guid>
      <description>Stiahnuť PDF PowerPoint PPT Obsah Problém producenta a konzumenta ako mechanizmu koordinácie vlákien. Ako si ho napísať od piky. Návrhy riešení a poukázanie na ich chyby. aktívne čakanie mechanizmus wait/notify Zabudované riešenia v Jave. </description>
    </item>
    
    <item>
      <title>Vlákna / Threads a Swing GUI</title>
      <link>https://novotnyr.github.io/slides/threads-vlakna-a-swing-gui/</link>
      <pubDate>Fri, 20 Feb 2009 16:08:05 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/slides/threads-vlakna-a-swing-gui/</guid>
      <description> Ako korektne programovať dlhotrvajúce operácie v Swing GUI?
Stiahnuť PDF Powerpoint PPT Obsah Swing a vlákna. Problém s Event Dispatch Thread. Metóda invokeLater() Trieda SwingWorker </description>
    </item>
    
    <item>
      <title>Vlákna / Threads v Jave</title>
      <link>https://novotnyr.github.io/slides/threads-vlakna-v-jave/</link>
      <pubDate>Fri, 20 Feb 2009 16:08:05 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/slides/threads-vlakna-v-jave/</guid>
      <description>Prečo paralelne programovať?
Stiahnuť PDF PowerPoint PPT Obsah Úlohy / tasks Ako si vytvoriť úlohu (task) a spustiť ju paralelne. Exekútory ako spôsob spúšťania paralelných úloh v Jave. Vlákna / threads Vlákna (Threads) a ich reprezentácia v Jave. Pozastavenie úlohy (sleep). Ukončenie behu (interrupt). Zdieľané dáta Zdieľanie dát a problémy, ktoré nastanú: interferencia, nekonzistencia, deadlock. Ukážky a návod riešenia cez kritické sekcie. Thread-safety Thread-safety – zabezpečenie dát proti problémom zdieľania Thread-safe triedy a kolekcie.</description>
    </item>
    
    <item>
      <title>Logovanie v aplikáciách pomocou `slf4j`</title>
      <link>https://novotnyr.github.io/scrolls/logovanie-v-aplikaciach-pomocou-slf4j/</link>
      <pubDate>Wed, 11 Feb 2009 01:34:57 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/logovanie-v-aplikaciach-pomocou-slf4j/</guid>
      <description>Úvod Logovanie je neodbytnou súčasťou každej aplikácie, hoci si to autori ani neuvedomujú. Je takmer nevyhnutné priebežne sledovať stav behu aplikácie, či evidovať chybové hlásenia. Ladiace (logovacie) výpisy sú spôsob, ktorým je možné to dosiahnuť. Za takýto výpis možno považovať už každý výpis smerujúci na konzolu (teda využívajúci System.out alebo System.err). V prípade zložitých systémov však System.out veľmi rýchlo prestane vyhovovať.
Note
Logovanie (logging) má svoj pôvod v moreplavbe, presnejšie v spôsobe určovania rýchlosti lode.</description>
    </item>
    
    <item>
      <title>XUL – receptár tipov a trikov</title>
      <link>https://novotnyr.github.io/scrolls/xul-receptar-tipov-a-trikov/</link>
      <pubDate>Sun, 08 Feb 2009 19:54:37 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/xul-receptar-tipov-a-trikov/</guid>
      <description>Ako pridať riadky do stromu? &amp;lt;tree id=&amp;#34;treeXPaths&amp;#34; flex=&amp;#34;1&amp;#34; rows=&amp;#34;20&amp;#34; hidecolumnpicker=&amp;#34;true&amp;#34;&amp;gt; &amp;lt;treecols&amp;gt; &amp;lt;treecol id=&amp;#34;site&amp;#34; label=&amp;#34;Site&amp;#34; flex=&amp;#34;1&amp;#34;/&amp;gt; &amp;lt;treecol id=&amp;#34;xpath&amp;#34; label=&amp;#34;XPath&amp;#34; flex=&amp;#34;2&amp;#34;/&amp;gt; &amp;lt;/treecols&amp;gt; &amp;lt;treechildren /&amp;gt; &amp;lt;/tree&amp;gt; Kód
var treeXPaths = document.getElementById(&amp;#34;treeXPaths&amp;#34;); // extract &amp;lt;treechildren&amp;gt; var treechildren = treeXPaths.getElementsByTagName(&amp;#34;treechildren&amp;#34;).item(0); // hierarchy is: treechildren / treeitem / treerow / treecell var treeitem = document.createElement(&amp;#34;treeitem&amp;#34;); treechildren.appendChild(treeitem); var treerow = document.createElement(&amp;#34;treerow&amp;#34;); treeitem.appendChild(treerow); var treecellUrl = document.createElement(&amp;#34;treecell&amp;#34;); treecellUrl.setAttribute(&amp;#34;label&amp;#34;, url); treerow.appendChild(treecellUrl); var treecellXPath = document.createElement(&amp;#34;treecell&amp;#34;); treecellXPath.setAttribute(&amp;#34;label&amp;#34;, xPath); treerow.appendChild(treecellXPath); </description>
    </item>
    
    <item>
      <title>Vytváranie webových aplikácií pomocou Spring MVC 2.5</title>
      <link>https://novotnyr.github.io/scrolls/vytvaranie-webovych-aplikacii-spring-mvc/</link>
      <pubDate>Thu, 20 Nov 2008 17:22:51 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/vytvaranie-webovych-aplikacii-spring-mvc/</guid>
      <description>Úvod Spring MVC je už pomerne zaužívaný aplikačný rámec na vývoj webových aplikácií. Už jeho prvé verzie brali do úvahy skúsenosti a poučenia z iných MVC frameworkov. Navyše, s každou ďalšou verziou boli prezentované možnosti, ktoré prácu s ním ešte viac zjednodušili či uľahčili.
Vo verzii 2.5 je k dispozícii možnosť vytvárať webové aplikácie, ktoré dávajú väčší dôraz na zásadu, že dohoda je niekedy lepšia ako konfigurácia. Dodržiavanie menných konvencií a hojné použitie anotácií umožňuje vytvárať webové aplikácie založené na klasických Java triedach (POJO) s minimálnym množstvom konfigurácie.</description>
    </item>
    
    <item>
      <title>Programovanie, algoritmy, zložitosť 2008</title>
      <link>https://novotnyr.github.io/courses/programovanie-algoritmy-zlozitost-paz1c-2008/</link>
      <pubDate>Tue, 23 Sep 2008 12:56:00 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/courses/programovanie-algoritmy-zlozitost-paz1c-2008/</guid>
      <description>Oznamy Mimoriadne cvičenia sú vo štvrtok 13.30 v P7. Podmienky na zápočet sú uvedené v prvej prezentácii. Každý študent je povinný byť na práve jednom praktickom cvičení a na teoretickom cvičení Úvod a podmienky na zápočet teoretické cvičenie - streda, 10.00, P8
cvičenie pri počítačoch
pondelok, 7.20, P3 piatok, 9.00, P3 cvičenie v piatok o 14.00 zrušené pre nedostatok záujmu. podmienky na zápočet
účasť na praktických cvičeniach (20%) domáce úlohy (raz za dve cvičenia) (30%) záverečný projekt (30%) test po precvičení dedičnosti (20%) Teoretické cvičenia Cvičenie 1 (17.</description>
    </item>
    
    <item>
      <title>Spring zmenil politiku aktualizácií - rana pod pás open source?</title>
      <link>https://novotnyr.github.io/scrolls/spring-zmenil-politiku-aktualizacii/</link>
      <pubDate>Sun, 21 Sep 2008 22:59:29 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/spring-zmenil-politiku-aktualizacii/</guid>
      <description>Niet nad trochu IT bulváru v sobotu ráno.
SpringSource, spoločnosť stojaca za aplikačným rámcom Spring, v sobotu ráno oznámila, že mení politiku vydávania aktualizácií Springu. A v diskusiách sa hneď strhla radikálna nálada a krik o konci open-source.
Dosiaľ mala komunita k dispozícii všetky aktualizované verzie Springu, ale situácia sa zmení. Po vydaní novej významnej verzie Springu začne plynúť trojmesačná doba, počas ktorej budú prípadné aktualizované verzie dostupné komunite. Po jej uplynutí budú aktualizované verzie dostupné len zákazníkom programu SpringSource Enterprise.</description>
    </item>
    
    <item>
      <title>Bedáky nad JAXB - pluginy</title>
      <link>https://novotnyr.github.io/scrolls/bedaky-nad-jaxb-pluginy/</link>
      <pubDate>Wed, 10 Sep 2008 22:41:41 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/bedaky-nad-jaxb-pluginy/</guid>
      <description>V jednom z projektov používame JAXB, čo je nástroj na mapovanie XML schémy na Java triedy. Jedného pekného rána sme dostali nápad použiť plugin FluentAPI, ktorý vie dodať triedam vygenerovaným zo schémy metódy with.... Potom vieme používať
USAddress address = new USAddress() .withName(name) .withStreet(street) .withCity(city) .withState(state) .withZip(new BigDecimal(zip)); Stiahli sme teda JAR súbor, a do antovského build.xml dodali:
&amp;lt;taskdef name=&amp;#34;xjc&amp;#34; classname=&amp;#34;com.sun.tools.xjc.XJCTask&amp;#34;&amp;gt; &amp;lt;classpath&amp;gt; &amp;lt;pathelement path=&amp;#34;C:/java/jaxb/lib/jaxb-xjc.jar&amp;#34; /&amp;gt; &amp;lt;pathelement path=&amp;#34;C:/java/jaxb/lib/jaxb-fluent-api-2.1.3.jar&amp;#34; /&amp;gt; &amp;lt;/classpath&amp;gt; &amp;lt;/taskdef&amp;gt; &amp;lt;target name=&amp;#34;generate-classes&amp;#34;&amp;gt; &amp;lt;xjc extension=&amp;#34;true&amp;#34; destdir=&amp;#34;src&amp;#34;&amp;gt; &amp;lt;schema dir=&amp;#34;src&amp;#34; includes=&amp;#34;*.</description>
    </item>
    
    <item>
      <title>Bedáky nad XML Security</title>
      <link>https://novotnyr.github.io/scrolls/bedaky-nad-xml-security/</link>
      <pubDate>Fri, 05 Sep 2008 15:30:40 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/bedaky-nad-xml-security/</guid>
      <description>XML-Security 1.4.0 má problémy s kódovaním diakritických znakov.
Xml canonization - UTF-8 encoding issue in Xml security 1.4.0. Committed by RB. Thanks to Karol Rewera. See Issue 41462
XML-Security 1.4.1 funguje, ale v Spring-WS prestane fungovať šifrovanie správ certifikátom, ktorý odošle klient (WSHandler z WSS4J začne overovať certifikát, čo nemá robiť). Pomôže import certifikátu klienta do serverovského trust storu.
XML-Security 1.4.2 funguje, ale hádže výnimky, keď digest uvedený v požiadavke nesedí s vypočítaným digestom.</description>
    </item>
    
    <item>
      <title>JAXB – receptár tipov a trikov</title>
      <link>https://novotnyr.github.io/scrolls/jaxb-receptar-tipov-a-trikov/</link>
      <pubDate>Thu, 04 Sep 2008 09:10:43 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/jaxb-receptar-tipov-a-trikov/</guid>
      <description>Pri kompilácii XML schémy pomocou JAXB sú niektoré XML typy namapované na „neštandardné&amp;quot; Java triedy. Napríklad typy pre dátum a čas (xsd:date, xsd:time) nie sú mapované na java.util.Date(), ale na špeciálnu triedu javax.xml.datatype.XMLGregorianCalendar (dôvodom je vraj rozličný rozsah platnosti tried). V JAXB je však možné prispôsobiť mapovania tried pomocou XJB súboru. Na [blogu jedného z autorov](http://weblogs.java.net/blog/kohsuke/archive/2006/03/how_do_i_map_xs.html |) JAXB sa udáva možnosť priameho mapovania na java.util.Date.
V jednom z projektov sme potrebovali mapovanie na java.</description>
    </item>
    
    <item>
      <title>Spring WS – šifrované a podpisované správy</title>
      <link>https://novotnyr.github.io/scrolls/spring-ws-sifrovane-a-podpisovane-spravy/</link>
      <pubDate>Mon, 01 Sep 2008 00:00:00 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/spring-ws-sifrovane-a-podpisovane-spravy/</guid>
      <description>Aplikačný kontext na strane servera Endpoint Predovšetkým definujeme bean endpointu
&amp;lt;bean id=&amp;#34;movieReservationEndpoint&amp;#34; class=&amp;#34;sk.novotnyr.movies.ws.MovieReservationEndPoint&amp;#34; /&amp;gt; Mapovanie endpointov Ďalej definujeme mapovanie požiadaviek na endpointy. Mapovanie podľa koreňového elementu nie je možné, keďže budeme prijímať šifrované správy, kde ešte nebudeme mať prístup k payloadu. (Payload je dešifrovaný interceptormi a tie sa použijú až vtedy, keď sa vyhodnotí endpoint, ktorý požiadavku spracuje.) V našom prípade použijeme mapovanie podľa hlavičky SoapAction. Akcia http://movies/movieReservation bude spracovaná endpointom movieReservationEndpoint.</description>
    </item>
    
    <item>
      <title>Spring WS a šifrované správy</title>
      <link>https://novotnyr.github.io/scrolls/spring-ws-sifrovane-spravy/</link>
      <pubDate>Mon, 25 Aug 2008 17:22:51 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/spring-ws-sifrovane-spravy/</guid>
      <description>Keystore Vygenerovanie dvojice privátny kľúč-verejný kľúč pre server keytool -genkey -alias ais-ws-server -keystore ais-ws-server.jks -keyalg RSA Pozn. treba explicitne zvoliť algoritmus RSA, pretože implicitný algoritmus DSA vedie na klientskej strane k chybe:
Can&amp;#39;t use DSA for encryption Export serverovského certifikátu export verejného kľúča (= serverovského certifikátu), ktorým bude klient šifrovať správy
keytool -export -alias ais-ws-server -file ais-ws-server-public-key.crt -keystore ais-ws-server.jks Súbor ais-ws-server-public-key.crt obsahuje certifikát servera, ktorý importneme do keystoru u klienta.</description>
    </item>
    
    <item>
      <title>Securing Spring Web Services with XWSS</title>
      <link>https://novotnyr.github.io/scrolls/zabezpecenie-webovych-sluzieb-v-spring-ws-cez-xwss/</link>
      <pubDate>Thu, 14 Aug 2008 08:18:51 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/zabezpecenie-webovych-sluzieb-v-spring-ws-cez-xwss/</guid>
      <description>Server Predpokladajme, že máme hotovú kostru pre serverovskú časť Spring-WS. Majme bežný endpoint, ktorý je klasickým POJOm. Endpoint predstavuje metódu, ktorá nevracia nič a dokument na vstupe pošle na štandardný výstup na serveri.
Endpoint package ais.ws; import javax.xml.transform.Source; import javax.xml.transform.Transformer; import javax.xml.transform.TransformerFactory; import javax.xml.transform.stream.StreamResult; public class RegistrationEndPoint { public void handleMovieReservationRequest(Source messageSource) { try { Transformer transformer = TransformerFactory.newInstance().newTransformer(); transformer.transform(messageSource, new StreamResult(System.out)); } catch (Exception e) { e.printStackTrace(); } } } Bean zadeklarujeme v aplikačnom kontexte Springu:</description>
    </item>
    
    <item>
      <title>Ako na rekurziu v databázach</title>
      <link>https://novotnyr.github.io/scrolls/ako-na-rekurziu-v-databazach/</link>
      <pubDate>Thu, 07 Aug 2008 16:08:05 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/ako-na-rekurziu-v-databazach/</guid>
      <description>Čísla od 1 po n Vytvorte tabulku, ktora obsahuje v riadkoch cisla od 1 po N.
V Pascale by to bol for:
for i:=1 to N do begin writeln(i) end Lenze my nemame for. Mame len rekurziu. My vsak vieme kazdy prvok v postupnosti odvodit z predosleho prvku.
Prvy prvok je 0, dalsi prvok je predosly prvok + 1. s_0 = 0 s_i = s_i-1 + 1 Napisane vseobecne
s(i) = 0, ak i = 0 s(i) = s(i-1) + 1 s(x) = 0, ak x = 0 s(x) = s(x-1) + 1 Toto vieme mechanicky previest na SELECT</description>
    </item>
    
    <item>
      <title>Od WSDL k webovej službe – Glassfish Metro</title>
      <link>https://novotnyr.github.io/scrolls/od-wsdl-k-webovej-sluzbe-glassfish-metro/</link>
      <pubDate>Mon, 14 Jul 2008 12:22:32 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/od-wsdl-k-webovej-sluzbe-glassfish-metro/</guid>
      <description>V predošlom dieli sme si ukázali príklad popisovača webovej služby v podobe WSDL súboru. Ak máme tento súbor, môžeme použiť niektoré z existujúcich nástrojov na vygenerovanie zdrojového kódu pre serverovskú časť služby i pre klienta, ktorý k nej bude pristupovať.
Tento spôsob je k dispozícii vo všetkých významných Java frameworkoch pre webové služby - teda aj v Apache CXF, Axis 1, Axis 2 a Glassfish Metro.
Samotná Java poskytuje na prístup k webovým službám viacero API združených pod rôznymi špecifikáciami.</description>
    </item>
    
    <item>
      <title>Reactome WebService a SOAP API</title>
      <link>https://novotnyr.github.io/scrolls/reactome-webservice-soap-api/</link>
      <pubDate>Sat, 05 Jul 2008 00:00:00 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/reactome-webservice-soap-api/</guid>
      <description>Reactome WS API dava k dispozicii [XSD schemu prenasanych dat](http://www.reactome.org:8080/caBIOWebApp/services/caBIOService?wsdl | WSDL subor]], ktory sa odkazuje na [[http://www.reactome.org:8080/caBIOWebApp/docs/caBIOExtensionsXMLSchema.xsd ).
Problem s publikovanym WSDL je v pouzivanom bindingu. WSDL vzniklo zjavne automatickym generovanim z Java tried publikovanych v stacku Axis1. Tento stack je vsak prastary a jediny styl sprav, ktory podporuje, je RPC/encoded.
Kamenom urazu je to, ze ziadny z modernych frameworkov uz nepodporuje tento binding a ak podporuje (prikladom je Metro), tak len velmi limitovane.</description>
    </item>
    
    <item>
      <title>Použitie Spring-WS na klasické Java objekty</title>
      <link>https://novotnyr.github.io/scrolls/pouzitie-spring-ws-na-klasicke-java-projekty/</link>
      <pubDate>Tue, 24 Jun 2008 15:17:23 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/pouzitie-spring-ws-na-klasicke-java-projekty/</guid>
      <description>Úvod [dokumentácii](http://static.springframework.org/spring-ws/site/ | Spring Web Services]] (Spring-WS) je knižnica pre podporu budovania webových služieb v Jave. Spadá teda do rodiny, v ktorej sú knižnice / aplikačné rámce ako [[http://ws.apache.org/axis2/ | Apache Axis2]], [[http://cxf.apache.org/ | Apache CXF]] alebo [[https://metro.dev.java.net/ | Glassfish Metro]]. Na rozdiel od jej bratrancov je základnou filozofiou „contract-first&amp;quot;. Pri budovaní webových služieb sa teda očakáva vybudovanie XML schémy, popisovača WSDL a tried, ktoré vychádzajú práve z týchto jazykovo a platformovo nezávislých súčastí.</description>
    </item>
    
    <item>
      <title>Ako bolo na stretnutí JavaTeamu na Vychodze</title>
      <link>https://novotnyr.github.io/scrolls/ako-bolo-na-stretnuti-javateam-na-vychodze/</link>
      <pubDate>Fri, 20 Jun 2008 09:24:38 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/ako-bolo-na-stretnuti-javateam-na-vychodze/</guid>
      <description>Tak nám uspořádali sezení JUGu, paní Müllerová!
Po mojich dvoch minuloročných návštevách pražského CZJUGu by som asi neveril, že sa niečo podobné podarí spraviť aj v Košiciach. Ale zázraky sa dejú. 16. apríla 2008 spravil bratislavský Java Team výjazdové zasadnutie a exportoval svoj prvý session aj na Východ.
Napriek tomu, že akcia sa šírila ústnym a mailovým podaním, sa nazbieral podľa mňa značný počet ľudí. V miestnosti som ich odhadol minimálne 30.</description>
    </item>
    
    <item>
      <title>Ako naplánovať cestu autom cez Dijkstrov algoritmus</title>
      <link>https://novotnyr.github.io/scrolls/ako-naplanovat-cestu-autom-dijkstra-algoritmus/</link>
      <pubDate>Sun, 01 Jun 2008 09:30:00 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/ako-naplanovat-cestu-autom-dijkstra-algoritmus/</guid>
      <description>Cestujeme na východ Predstavte si, že vás ktosi prinútil odcestovať na obchodné rokovanie z Bratislavy do Košíc a ste nútení na to použiť auto. Aby ste znížili náklady, budete chcieť asi nájsť optimálnu cestu — pre jednoduchosť predpokladajme, že je to najkratšia cesta. Na to použijete asi klasický autoatlas Slovenskej republiky, v ktorom si cestu vypočítate sami. Ako druhú možnosť môžete použiť niektorý z existujúcich internetových plánovačov ciest, ktoré vám cestu vypočítajú samé.</description>
    </item>
    
    <item>
      <title>Ako zaviesť internet s použitím kostier? Kruskalov algoritmus pre minimálnu kostru grafu.</title>
      <link>https://novotnyr.github.io/scrolls/ako-zaviest-internet-s-pouzitim-kostier-minimalna-kostra-kruskalov-algoritmus/</link>
      <pubDate>Mon, 19 May 2008 00:00:00 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/ako-zaviest-internet-s-pouzitim-kostier-minimalna-kostra-kruskalov-algoritmus/</guid>
      <description>Zavádzame internet Predstavte si, že ste šéfom spoločnosti, ktorá získala balík peňazí na prepojenie slovenských krajských miest internetom s použitím optickej linky. Jednou z najdôležitejších vecí, ktorá vás bude zaujímať, je celková dĺžka káblov, ktoré budete musieť zaviesť medzi mestami. Asi veľmi rýchlo si všimnete, že káblom netreba prepojiť každé s každým mestom. (Nemusíte teda prepájať Košice s Bratislavou priamo, stačí zaviesť kábel do Banskej Bystrice a z nej do Bratislavy).</description>
    </item>
    
    <item>
      <title>Grafy reprezentované maticami incidencií v Jave</title>
      <link>https://novotnyr.github.io/scrolls/grafy-reprezentovane-maticami-incidencii-v-jave/</link>
      <pubDate>Tue, 13 May 2008 01:13:38 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/grafy-reprezentovane-maticami-incidencii-v-jave/</guid>
      <description>Matica incidencií V minulom príklade pre topologické triedenie sme používali vlastnú dátovú štruktúru, ktorá umožňovala jednoduché a efektívne vykonávanie operácií nad grafom (hľadanie uzla bez predchodcov, hľadanie nasledovníkov). Graf ako matematická štruktúra má ešte niekoľko ďalších spôsobov reprezentácie v programovacích jazykoch.
Jednou z možností je použitie matice incidencie, čo je tabuľka s n riadkami a stĺpcami (kde n je počet uzlov v grafe). Prvok v r-tom riadku a s-tom stĺpci má hodnotu 1, ak v grafe existuje hrana (teda prepojenie) medzi r-tým a s-tým uzlom.</description>
    </item>
    
    <item>
      <title>Ako usporiadať predmety v študijnom programe? Algoritmus pre topologické triedenie</title>
      <link>https://novotnyr.github.io/scrolls/ako-usporiadat-predmety-v-studijnom-programe-topologicke-triedenie/</link>
      <pubDate>Sun, 11 May 2008 00:00:00 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/ako-usporiadat-predmety-v-studijnom-programe-topologicke-triedenie/</guid>
      <description>Úvod Moderný študent sa musí boriť s mnohými problémami. Kreditný systém používaný na univerzitách je dostatočne flexibilný, ale kladie na úbohého študenta mnohé bremená — napr. potrebu si vybrať predmety tak, aby spĺňali nielen jeho túžby a očakávania, ale aj formálne kritériá systému.
Predstavme si študijný program, čo je množina predmetov, v ktorej má každý predmet množinu „prerekvizít“. Prerekvizita predmetu predstavuje sadu predmetov, ktoré musí študent absolvovať predtým, než si zapíše daný predmet.</description>
    </item>
    
    <item>
      <title>Prehľadávanie do hĺbky v jazyku Java</title>
      <link>https://novotnyr.github.io/scrolls/prehladavanie-do-hlbky-v-jazyku-java/</link>
      <pubDate>Wed, 07 May 2008 00:00:00 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/prehladavanie-do-hlbky-v-jazyku-java/</guid>
      <description>Úvod V predošlom článku sme spomínali algoritmus prehľadávania do šírky, ktorý prechádzal strom ,,po vrstvách&amp;quot;. Okrem neho jestvuje ešte analogický algoritmus prehľadávania do hĺbky. Jeho základnou ideou je preskúmavanie ciest vedúcich k čo najhlbšiemu potomkovi daného uzla.
Pekným príkladom prehľadávania do hĺbky je traverzovanie súborového systému. Ak chceme prejsť všetky súbory v danom adresári a jeho podadresároch (a v podadresároch jeho podadresárov), takéto prehľadávanie sa nám veľmi hodí.
Zjednodušený súborový systém môže vyzerať nasledovne:</description>
    </item>
    
    <item>
      <title>Prehľadávanie do šírky v jazyku Java</title>
      <link>https://novotnyr.github.io/scrolls/prehladavanie-do-sirky-v-jazyku-java/</link>
      <pubDate>Tue, 06 May 2008 00:00:00 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/prehladavanie-do-sirky-v-jazyku-java/</guid>
      <description>Úvod Algoritmy na prehľadávanie stromov si množstvo ľudí pamätá (alebo nepamätá) z vysokej školy. Napriek tomu niekedy môže nastať situácia, keď je vhodné ich použiť a pri tej príležitosti si ich pripomenúť.
Predstavme si jednoduchú úlohu: máme stromovú štruktúru (napr. rodostrom predkov), ktorú chceme vypísať na konzolu. Príkladom takéhoto stromu je nasledovný obrázok:
Výpis na konzolu by znamenal, že chceme vypísať niečo takéto:
koreň A B C 1 2 3 4 5 Ako na to?</description>
    </item>
    
    <item>
      <title>Java Workshop 2008</title>
      <link>https://novotnyr.github.io/courses/java-workshop-2008/</link>
      <pubDate>Mon, 28 Apr 2008 12:45:53 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/courses/java-workshop-2008/</guid>
      <description>O workshope Workshop nadväzuje na Popoludnia s jazykom Java, neformálne semináre o Jave a webovom programovaní z rokov 2006 a 2007.
Obsah Prvé stretnutie (14. 4. 2008) Popis možností pripojenia sa k databáze MySQL pomocou technológie JDBC. Ukážka použitia pomocných tried JDBC z aplikačného rámca Spring.
Prezentácia PPT Ukážkový projekt Ďalšie čítanie JDBC na Wiki FI.MUNI.CZ Druhé stretnutie (15. 4. 2008) Princíp fungovania webových aplikácií. Inštalácia kontajnera Tomcat. Ukážka servletu. Filozofia a princíp práce aplikačného rámca Spring MVC.</description>
    </item>
    
    <item>
      <title>Unit Tests with Spring and Hibernate</title>
      <link>https://novotnyr.github.io/scrolls/unit-tests-with-spring-and-hibernate/</link>
      <pubDate>Tue, 22 Apr 2008 00:00:00 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/unit-tests-with-spring-and-hibernate/</guid>
      <description>&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xmlns:aop=&amp;#34;http://www.springframework.org/schema/aop&amp;#34; xmlns:tx=&amp;#34;http://www.springframework.org/schema/tx&amp;#34; xmlns:context=&amp;#34;http://www.springframework.org/schema/context&amp;#34; xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd&amp;#34;&amp;gt; &amp;lt;bean name=&amp;#34;dataSource&amp;#34; class=&amp;#34;com.mysql.jdbc.jdbc2.optional.MysqlDataSource&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;user&amp;#34; value=&amp;#34;js&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;password&amp;#34; value=&amp;#34;js&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;serverName&amp;#34; value=&amp;#34;158.197.31.35&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;databaseName&amp;#34; value=&amp;#34;js&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;port&amp;#34; value=&amp;#34;80&amp;#34; /&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;bean id=&amp;#34;transactionManager&amp;#34; class=&amp;#34;org.springframework.jdbc.datasource.DataSourceTransactionManager&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;dataSource&amp;#34; ref=&amp;#34;dataSource&amp;#34; /&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;tx:annotation-driven transaction-manager=&amp;#34;transactionManager&amp;#34; /&amp;gt; &amp;lt;context:component-scan base-package=&amp;#34;sk.upjs.js&amp;#34; /&amp;gt; &amp;lt;bean id=&amp;#34;hibernateTemplate&amp;#34; class=&amp;#34;org.springframework.orm.hibernate3.HibernateTemplate&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;sessionFactory&amp;#34; ref=&amp;#34;sessionFactory&amp;#34; /&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;bean id=&amp;#34;sessionFactory&amp;#34; class=&amp;#34;org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;dataSource&amp;#34; ref=&amp;#34;dataSource&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;annotatedClasses&amp;#34;&amp;gt; &amp;lt;list&amp;gt; &amp;lt;value&amp;gt;sk.</description>
    </item>
    
    <item>
      <title>Tvorba GUI v Jave</title>
      <link>https://novotnyr.github.io/talks/tvorba-gui-v-jave/</link>
      <pubDate>Thu, 17 Apr 2008 10:00:00 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/talks/tvorba-gui-v-jave/</guid>
      <description>Koordináty Kedy: 17.4.2008 10.00
Kde: P/07
Téma: Tvorba grafického používateľského rozhrania s použitím Swing-u. Ukážka jednoduchých aplikácií a demonštrácia ich tvorby v prostredí NetBeans. Základné idey a filozofia.
Zverejnené materiály: Prezentácia PPT Aplikácia Konvertor mien Aplikácia ID3 Tagy </description>
    </item>
    
    <item>
      <title>Tomcat – receptár tipov a trikov</title>
      <link>https://novotnyr.github.io/scrolls/tomcat-receptar-tipy-triky/</link>
      <pubDate>Thu, 10 Apr 2008 15:40:10 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/tomcat-receptar-tipy-triky/</guid>
      <description>Zmena implicitnej uvítacej stránky Tomcat 4.1.x Do web.xml stačí vložiť nový kontext
&amp;lt;Context docBase=&amp;#34;C:\Java\Tomcat\webapps\ROOT&amp;#34; path=&amp;#34;&amp;#34; workDir=&amp;#34;work\Standalone\localhost\_&amp;#34; /&amp;gt; Tomcat 5.5.x Podľa odporúčaní je vhodné popisy kontextov ukladať do adresára %CATALINA_HOME%\conf\Catalina\localhost (a nie upravovať web.xml). Koreňový kontext zmeníme vytvorením súboru %CATALINA_HOME%\conf\Catalina\localhost\ROOT.xml s obsahom
&amp;lt;Context docBase=&amp;#34;C:/projects/tomcat-root&amp;#34; /&amp;gt; Kompilácia jsvc na 64bitovej Fedore Do configure pre jsvc treba okolo riadku 2630 (tam, kde sa detekuje architektúra) pridať do case vetvenia riadok
x86_64) CFLAGS=&amp;#34;$CFLAGS -DCPU=\\\&amp;#34;i686\\\&amp;#34;&amp;#34; ;; Potom sa pokračuje v inštalácii normálne (.</description>
    </item>
    
    <item>
      <title>Autentifikácia a autorizácia v servletových kontajneroch</title>
      <link>https://novotnyr.github.io/scrolls/autentifikacia-a-autorizacia-v-servletovych-kontajneroch/</link>
      <pubDate>Thu, 27 Mar 2008 23:22:28 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/autentifikacia-a-autorizacia-v-servletovych-kontajneroch/</guid>
      <description>Úvod Autentifikácia a autorizácia je súčasťou skoro každej významnej webovej aplikácie. Každý vývojar si tieto prvky zavádza do systému viacerými spôsobmi - buď vyvinutím vlastnej verzie alebo použitím niektorých z existujúcich riešení (napr. Acegi Security).
Jestvujú však prípady, keď si vystačíme s autentifikáciou a autorizáciou, ktorú poskytuje priamo špecifikácia servletov a implementujú ich jednotlivé servletové kontajnery.
V článku si ukážeme príklad jednoduchej aplikácie, ktorú zabezpečíme a nasadíme v kontajneroch Tomcat a Jetty.</description>
    </item>
    
    <item>
      <title>Spring 2.5 a anotácie pre automatické prepájanie komponentov</title>
      <link>https://novotnyr.github.io/scrolls/spring-anotacie-na-prepajanie-komponentov/</link>
      <pubDate>Tue, 26 Feb 2008 11:41:02 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/spring-anotacie-na-prepajanie-komponentov/</guid>
      <description>Jedným z významných prínosov Spring 2.5 je podpora anotácií, ktoré môžu slúžiť ako alternatíva na deklarovanie vzťahov a závislostí medzi jednotlivými komponentami a riešenie dependency injection. K dispozícii je podpora pre springovskú sadu anotácií i pre štandardizované anotácie zo špecifikácie JSR-250 (Commons Annotations for Java Platform).
Ukážme si jednoduchý príklad v ktorom sa používajú anotácie.
Springovské anotácie Majme interfejs na generovanie citátov:
package sk.novotnyr.quotes; public interface QuoteGenerator { public String getQuote(); } a jeho jednoduchú implementáciu:</description>
    </item>
    
    <item>
      <title>Hibernate – receptár tipov a trikov</title>
      <link>https://novotnyr.github.io/scrolls/hibernate-receptar-tipy-triky/</link>
      <pubDate>Tue, 19 Feb 2008 09:24:46 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/hibernate-receptar-tipy-triky/</guid>
      <description>Interceptory package sk.annun.davano.dao; import java.util.Collections; import java.util.Iterator; import org.apache.log4j.Logger; import org.hibernate.EmptyInterceptor; import org.springframework.jdbc.core.JdbcTemplate; import sk.annun.davano.Post; public class FulltextSearchUpdateInterceptor extends EmptyInterceptor { public static final Logger logger = Logger.getLogger(FulltextSearchUpdateInterceptor.class); private JdbcTemplate jdbcTemplate; // @Override // public boolean onFlushDirty(Object entity, Serializable id, Object[] currentState, Object[] previousState, String[] propertyNames, Type[] types) { // if(entity instanceof Post) { // Object[] params = {getText((Post) entity), id}; // jdbcTemplate.update(&amp;#34;UPDATE post_fulltext SET text = ? WHERE id = ?</description>
    </item>
    
    <item>
      <title>Menné priestory XML – XML Namespaces</title>
      <link>https://novotnyr.github.io/scrolls/menne-priestory-v-xml-namespaces/</link>
      <pubDate>Thu, 31 Jan 2008 00:00:00 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/menne-priestory-v-xml-namespaces/</guid>
      <description>Úvod Menné priestory (namespaces) v XML sú súčasťou špecifikácie Namespaces in XML 1.0 a jej cieľom je vyriešiť situácie, keď sa v jednom dokumente vyskytnú elementy, ktoré majú rovnaký názov, ale rôznu sémantiku (napr. pochádzajú z rôznych špecifikácií od viacerých výrobcov). Klasickým príkladom je použitie elementov z XHTML v rámci vytvárania šablóny v jazyku XSLT. Oba jazyky používajú zápis v XML, ale množiny povolených elementov sú rôzne. Menné priestory si kladú za cieľ vyriešiť problémy vyplývajúce z takýchto situácií.</description>
    </item>
    
    <item>
      <title>PHP Sessions and Security – Tips and Tricks</title>
      <link>https://novotnyr.github.io/scrolls/php-sessions-and-security-tips-and-tricks/</link>
      <pubDate>Thu, 31 Jan 2008 00:00:00 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/php-sessions-and-security-tips-and-tricks/</guid>
      <description>And now: 30 seconds o&amp;rsquo; fun:
Misc notes take MD5 of USER_AGENT into account (and possibly other HTTP headers) &amp;ndash; changing of it between sessions may be possible hijack use cookies as extra security level (put fingerprint into cookie) Store md5 of sid, ip, login time into cookie and into db table to compare them later use prevention of logging into existing session &amp;ndash; always generate new session ID after login.</description>
    </item>
    
    <item>
      <title>JAXB - architektúra pre mapovanie XML na objekty</title>
      <link>https://novotnyr.github.io/scrolls/jaxb-architektura-pre-mapovanie-xml-na-objekty/</link>
      <pubDate>Sun, 27 Jan 2008 00:00:00 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/jaxb-architektura-pre-mapovanie-xml-na-objekty/</guid>
      <description>Úvod „Technológie jazyka Java a XML možno považovať za ideálne stavebné bloky pre vývoj webových služieb a aplikácií, ktoré ich využívajú. Aplikačné rozhranie Java Architecture for XML Binding (JAXB) uľahčuje prácu s XML dokumentami v Java aplikáciách.“
Týmito slovami sumarizuje technológiu JAXB popisného dokumentu na stránkach Sun-u.
JAXB umožňuje mapovanie XML dokumentov na Java objekty a to v oboch smeroch. Samozrejme, že toto mapovanie sa musí riadiť nejakými pravidlami - v tomto prípade XML schémou, ktorá popisuje štruktúru príslušného XML dokumentu.</description>
    </item>
    
    <item>
      <title>Spring WS – Od XSD k webovej službe</title>
      <link>https://novotnyr.github.io/scrolls/spring-ws-od-xsd-k-webovej-sluzbe/</link>
      <pubDate>Fri, 11 Jan 2008 16:08:05 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/spring-ws-od-xsd-k-webovej-sluzbe/</guid>
      <description>Krok 1 - základná webová služba Ukážkový dokument pre požiadavku.
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;movieReservationRequest xmlns=&amp;#34;http://movie.novotnyr.sk/ws/types&amp;#34; &amp;gt; &amp;lt;title&amp;gt;Battlestar Galactica&amp;lt;/title&amp;gt; &amp;lt;date&amp;gt;2008-12-24&amp;lt;/date&amp;gt; &amp;lt;numberOfTickets&amp;gt;4&amp;lt;/numberOfTickets&amp;gt; &amp;lt;/movieReservationRequest&amp;gt; web.xml &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;web-app xmlns=&amp;#34;http://java.sun.com/xml/ns/j2ee&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xsi:schemaLocation=&amp;#34;http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd&amp;#34; version=&amp;#34;2.4&amp;#34;&amp;gt; &amp;lt;servlet&amp;gt; &amp;lt;servlet-name&amp;gt;spring-ws&amp;lt;/servlet-name&amp;gt; &amp;lt;servlet-class&amp;gt; org.springframework.ws.transport.http.MessageDispatcherServlet &amp;lt;/servlet-class&amp;gt; &amp;lt;load-on-startup&amp;gt;1&amp;lt;/load-on-startup&amp;gt; &amp;lt;/servlet&amp;gt; &amp;lt;servlet-mapping&amp;gt; &amp;lt;servlet-name&amp;gt;spring-ws&amp;lt;/servlet-name&amp;gt; &amp;lt;url-pattern&amp;gt;/*&amp;lt;/url-pattern&amp;gt; &amp;lt;/servlet-mapping&amp;gt; &amp;lt;/web-app&amp;gt; spring-ws-servlet.xml &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xmlns:context=&amp;#34;http://www.springframework.org/schema/context&amp;#34; xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd&amp;#34;&amp;gt; &amp;lt;context:component-scan base-package=&amp;#34;sk.novotnyr.movie&amp;#34;/&amp;gt; &amp;lt;bean class=&amp;#34;org.springframework.ws.server.endpoint.mapping .PayloadRootAnnotationMethodEndpointMapping&amp;#34;/&amp;gt; &amp;lt;/beans&amp;gt; Endpoint package sk.novotnyr.movie; import javax.xml.transform.Source; import javax.xml.transform.Transformer; import javax.xml.transform.TransformerFactory; import javax.</description>
    </item>
    
    <item>
      <title>Inštalácia JDK 6 – sprievodca</title>
      <link>https://novotnyr.github.io/scrolls/instalacia-jdk-6-graficky-sprievodca/</link>
      <pubDate>Thu, 15 Nov 2007 16:08:05 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/instalacia-jdk-6-graficky-sprievodca/</guid>
      <description>Stiahnutie inštalačného súboru Návšteva java.sun.com Navštívime stránku Sun-u (http://java.sun.com) a klikneme na odkaz Java SE v sekcii Popular Downloads:
Výber správnej verzie Nájdeme odkaz na JDK 6 a klikneme na Download
Odsúhlasenie licencie Licenciu odsúhlasime kliknutím na Accept
Výber operačného systému a typu inštalačného balíčka V prípade Windowsu klikneme na odkaz Windows Offline Installation (alternatívnou možnosťou je minibalíček pre inštaláciu z Internetu)
Uloženie inštalačného súboru Ponúknutý inštalačný súbor stiahneme do vhodného adresára.</description>
    </item>
    
    <item>
      <title>Hessian a vzdialené volanie procedúr</title>
      <link>https://novotnyr.github.io/scrolls/hessian-a-vzdialene-volanie-procedur/</link>
      <pubDate>Wed, 14 Nov 2007 00:07:50 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/hessian-a-vzdialene-volanie-procedur/</guid>
      <description>Úvod Caucho Hessian je protokol použiteľný na vzdialené volanie procedúr alebo na implementáciu myšlienky webových služieb. Samotný protokol je binárny a ako transportná vrstva je použitý klasické HTTP.
Paralelne s Hessian-om jestvuje spriatelený protokol Burlap, ktorý namiesto binárnej reprezentácie prenášaných dát používa XML.
Hessian umožňuje zverejniť na vzdialené volanie procedúr ľubovoľný interfejs, za ktorým stojí vhodná implementačná trieda.
Vzťah s podobnými technológiami Hessian vs RMI oba používajú binárne protokoly a Java serializáciu RMI používa vlastnú sieťovú komunikáciu, Hessian beží nad HTTP (je teda potrebný aspoň minimalistický servletový kontajner (príklad viď nižšie)) RMI je zabudovaný priamo v JDK Pre Hessian existuje interoperabilita: existujú implementácie pre iné programovacie jazyky (Python, C# a pod.</description>
    </item>
    
    <item>
      <title>Ant – krotíme mravce</title>
      <link>https://novotnyr.github.io/scrolls/ant-krotime-mravca/</link>
      <pubDate>Tue, 13 Nov 2007 09:53:47 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/ant-krotime-mravca/</guid>
      <description>Čo je Ant? Apache Ant je zostavovací nástroj založený na technológiách Javy. Jeho filozofia je veľmi podobná ideám z linuxového nástroja make. Na rozdiel od tohto nástroja však Ant používa XML syntax a je platformovo nezávislý.
Ant zjednodušuje nudné a často opakované procesy prebiehajúce pri zostavovaní softvéru. Typickým komplexným príkladom zostavovacieho procesu je cyklus „uprav – skompiluj – pribaľ serverovské konfiguráky – vyrob JAR – skopíruj na server“, ktorý je v manuálnom vykonávaní náchylný na chyby.</description>
    </item>
    
    <item>
      <title>Automatické odhaľovanie implementácii interfejsu v CLASSPATH</title>
      <link>https://novotnyr.github.io/scrolls/automaticke-odhalovanie-implementacii-interfejsu-v-classpath/</link>
      <pubDate>Sun, 11 Nov 2007 01:34:57 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/automaticke-odhalovanie-implementacii-interfejsu-v-classpath/</guid>
      <description>Zadanie Máte zadanú aplikáciu, ktorá má vykonávať nejakú činnosť nad rôznymi geometrickými útvarmi (pre jednoduchosť: štvorce, kruhy a pod.) Nové geometrické útvary však môžu byť pridávané do aplikácie za behu (napr. dopracujeme meňavku a chceme ju zaviesť do systému).
Riešenie Predpokladajme, že všetky geometrické útvary implementujú rozhranie Shape, ktoré poskytuje jedinú možnú činnosť - výpočet obsahu.
package sk.novotnyr.shapes; public interface Shape { public double getArea(); } Príklady ostatných geometrických útvarov môžu byť napr.</description>
    </item>
    
    <item>
      <title>XPath - adresovací jazyk pre XML</title>
      <link>https://novotnyr.github.io/scrolls/xpath-adresovaci-jazyk-pre-xml/</link>
      <pubDate>Tue, 02 Oct 2007 10:56:16 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/xpath-adresovaci-jazyk-pre-xml/</guid>
      <description>Úvod XPath je programovací jazyk určený na adresáciu jednotlivých prvkov XML súboru. Umožňuje pomocou jednoduchej syntaxe riešiť problémy typu &amp;ldquo;chcem všetky title elementy&amp;rdquo;, chcem všetky elementy author, ktoré sa nachádzajú pod elementom book s atribútom id rovným 12&amp;quot;, chcem všetkých vnukov koreňového elementu, a pod.
Jeho syntax je inšpirovaná syntaxou používanou v súborových systémoch - jednotlivé prvky XML stromu sú oddeľované lomkami. Je možné sa dopytovať na elementy v štruktúre, podstrome, prípadne v atribútoch.</description>
    </item>
    
    <item>
      <title>Transformácie XML súborov v Jave pomocou TraX</title>
      <link>https://novotnyr.github.io/scrolls/transformacie-xml-suborov-v-jave-pomocou-trax/</link>
      <pubDate>Sun, 30 Sep 2007 11:54:31 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/transformacie-xml-suborov-v-jave-pomocou-trax/</guid>
      <description>Úvod Do práce s XML v Jave väčšinou spadá jedna z nasledovných operácií:
práca s jednotlivými uzlami - teda elementmi, atribútmi, textom atď pomocou niektorého z mnohých dostupných API (či už DOM, SAX, StAX) adresovanie uzlov pomocou dopytovacieho jazyka XPath transformácia XML pomocou niektorého z transformačných jazykov. V tomto článku sa budeme venovať tretiemu bodu. Transformácia XML stromu je proces, ktorý na základe vstupného XML a nejakých pravidiel vráti prepracované výstupné XML.</description>
    </item>
    
    <item>
      <title>Dátové zdroje JDBC v Tomcate</title>
      <link>https://novotnyr.github.io/scrolls/datove-zdroje-jdbc-v-tomcat-datasource/</link>
      <pubDate>Thu, 27 Sep 2007 10:44:11 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/datove-zdroje-jdbc-v-tomcat-datasource/</guid>
      <description>Predpokladajme, že chceme sprístupniť v Tomcate globálny dátový zdroj JDBC dostupný cez JNDI vyhľadávanie. Globálnosť v tomto prípade znamená, že ho definujeme v Tomcate ako globálny JNDI zdroj.
Zadefinovanie globálneho JNDI zdroja. V Tomcate 5.5.x zadefinujeme globálny dátový zdroj buď pomocou administrátorského panela, alebo manuálne. V prípade manuálnej konfigurácie vložíme do server.xml do elementu &amp;lt;GlobalNamingResources&amp;gt;
&amp;lt;Resource auth=&amp;#34;Container&amp;#34; name=&amp;#34;jdbc/MyDataSource&amp;#34; type=&amp;#34;javax.sql.DataSource&amp;#34; url=&amp;#34;jdbc:db2://dbserver:50000/mydb&amp;#34; driverClassName=&amp;#34;com.p6spy.engine.spy.P6SpyDriver&amp;#34; username=&amp;#34;xxx&amp;#34; password=&amp;#34;xxx&amp;#34; maxActive=&amp;#34;20&amp;#34; maxIdle=&amp;#34;10&amp;#34; maxWait=&amp;#34;-1&amp;#34; /&amp;gt; Zadefinovanie odkazu na globálny zdroj v deskriptore kontextu.</description>
    </item>
    
    <item>
      <title>Spring a posielanie udalostí</title>
      <link>https://novotnyr.github.io/scrolls/spring-a-posielanie-udalosti/</link>
      <pubDate>Tue, 25 Sep 2007 10:46:19 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/spring-a-posielanie-udalosti/</guid>
      <description>Úvod Aplikačný kontext v Springu zjednodušuje podporu implementácie návrhového vzoru Observer (alias listener alias publish/subscribe). K dispozícii je niekoľko rozhraní a pomocných tried, ktoré uľahčujú častokrát opakované písanie tried pre registráciu listenerov a poskytuje priamu podporu pre synchrónne i asynchrónne vyvolávanie udalostí.
Základné objekty a triedy Pri implementácii uvedeného návrhového vzoru sa využívajú nasledovné koncepty:
udalosť – dátový typ reprezentuje druh udalosti. Objekt môže niesť dáta späté s udalosťou. poslucháč – v prípade, že nastane udalosť, sú mu zasielané príslušné objekty udalostí vysielač udalostí – predstavuje objekt, do ktorého sa zaregistrujú poslucháči.</description>
    </item>
    
    <item>
      <title>Programovanie, algoritmy, zložitosť 2007</title>
      <link>https://novotnyr.github.io/courses/programovanie-algoritmy-zlozitost-paz1c-2007/</link>
      <pubDate>Sun, 23 Sep 2007 12:56:00 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/courses/programovanie-algoritmy-zlozitost-paz1c-2007/</guid>
      <description>Oznamy Podmienky na zápočet sú uvedené v prvej prezentácii. Vyberte si vhodnú tému projektu a spoluriešiteľov a príďte ju prekonzultovať. Odovzdávanie projektov je medzi 20. a 30. januárom 2008! Úvod a podmienky na zápočet teoretické cvičenie - piatok, 11.00, P17 cvičenie pri počítačoch - štvrtok, 13.00, P3 podmienky na zápočet účasť na praktických cvičeniach (20%) domáce úlohy (raz za dve cvičenia) (30%) záverečný projekt (30%) test po precvičení dedičnosti (20%) Projekty Číselná lotéria (Potpinková, Martuš).</description>
    </item>
    
    <item>
      <title>Ako na JAR súbory?</title>
      <link>https://novotnyr.github.io/scrolls/ako-na-jar-subory/</link>
      <pubDate>Sun, 16 Sep 2007 15:30:40 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/ako-na-jar-subory/</guid>
      <description>Úvod JAR súbory plnia úlohu kompaktného úložiska .class súborov v Jave. Ich výhodou je šetrenie miestom (.class súbory sú zväčša malé a zaberali by tak veľa nadbytočného miesta), ľahké prenášanie a manipulácia.
Z technického hľadiska sú JAR súbory ničím iným, než premenovanými ZIP archívmi (áno, naozaj je to tak!). Možno ich teda vytvoriť pomocou ľubovoľného ZIP nástroja.
Vo vývojovom prostredí Javy sa však nachádza nástroj jar.exe, ktorý uľahčuje manipuláciu s JAR súbormi.</description>
    </item>
    
    <item>
      <title>Rýchly sprievodca Stripes</title>
      <link>https://novotnyr.github.io/scrolls/stripes-rychly-sprievodca/</link>
      <pubDate>Fri, 07 Sep 2007 10:45:21 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/stripes-rychly-sprievodca/</guid>
      <description>Úvod Stripes je aplikačný rámec na tvorbu webových aplikácii založený na návrhovom vzorec MVC. Medzi základné vlastnosti patrí:
zameranie na najnovšie vymoženosti poskytované Javou 5 žiadne konfiguračné súbory konfigurácia sa deje pomocou anotácií. kontroléry sa konfigurujú a mapujú na URL automaticky na základe mennej konvencie. snaha vyriešiť niektoré problémy Struts (modelom môže byť ľubovoľný objekt, podpora komplexného mapovania parametrov z URL na objekty, predvypĺňanie objektov) snaha o nezávislosť view vrstvy na JSP vlastná knižnica tagov pre použitie v JSP (a Freemarkeri) kontrolér je zároveň modelom, pri každej požiadavke sa vytvára jeho nová inštancia.</description>
    </item>
    
    <item>
      <title>iBatis – receptár tipov a trikov</title>
      <link>https://novotnyr.github.io/scrolls/ibatis-receptar-tipy-triky/</link>
      <pubDate>Thu, 06 Sep 2007 00:00:00 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/ibatis-receptar-tipy-triky/</guid>
      <description>Používanie bodkočiarok Zvážte používanie bodkočiarok v dopytoch - môže to pôsobiť veľa problémov. Napr. ovládač typu NET pre DB2 spokojne skonzumuje dopyt ukončený bodkočiarkou. Žiaľ, JCC verzia ovládača sa zakusne a vyhlási syntaktickú chybu.
Vzťahy 1:1 s použitím ResultMapy a explicitné vzťahy Majme
&amp;lt;resultMap class=&amp;#34;libris.Book&amp;#34; id=&amp;#34;bookRM&amp;#34; groupBy=&amp;#34;id&amp;#34; &amp;gt; &amp;lt;result property=&amp;#34;id&amp;#34; column=&amp;#34;id_book&amp;#34;/&amp;gt; &amp;lt;result property=&amp;#34;title&amp;#34; column=&amp;#34;title&amp;#34;/&amp;gt; &amp;lt;result property=&amp;#34;status.requestsCount&amp;#34; column=&amp;#34;request_count&amp;#34;/&amp;gt; &amp;lt;result property=&amp;#34;status.borrowedTo&amp;#34; column=&amp;#34;borrowee&amp;#34;/&amp;gt; &amp;lt;result property=&amp;#34;series&amp;#34; resultMap=&amp;#34;Book.seriesRM&amp;#34;/&amp;gt; &amp;lt;/resultMap&amp;gt; a triedu
public class Book implements Serializable { protected Integer id; protected String title = new String(); private BookStatus status; private SimpleSeries series = SimpleSeries.</description>
    </item>
    
    <item>
      <title>HSQLDB - embedded databáza</title>
      <link>https://novotnyr.github.io/scrolls/hsqldb-embedded-databaza/</link>
      <pubDate>Tue, 04 Sep 2007 09:15:49 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/hsqldb-embedded-databaza/</guid>
      <description>Úvod hsqldb je ľahká 100% Java databáza, ktorú môžete bez problémov zahrnúť, či embeddnúť do svojho projektu. Vlastnosti:
malá veľkosť – základný JAR má 700kB podpora značnej časti SQL štandardu primárne a cudzie kľúče joiny vnorené SELECTy V prípade jednoduchých Java projektov je jej použitie jednoduchšie ako inštalácia a konfigurácia najčastejšie používanej databázy MySQL. Nevyžaduje sa totiž žiadna inštalácia ani konfigurácia schém alebo užívateľských práv. &amp;hellip;
Inštalácia a spustenie ZIP súbor si možno stiahnuť zo SourceForge.</description>
    </item>
    
    <item>
      <title>CLASSPATH - nočná mora?</title>
      <link>https://novotnyr.github.io/scrolls/classpath-nocna-mora/</link>
      <pubDate>Tue, 04 Sep 2007 08:20:57 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/classpath-nocna-mora/</guid>
      <description>Úvod Asi každý pisateľ kódu v Jave sa stretol s výnimkou ClassNotFoundException, ktorá indikuje chybový stav, keď Java Virtual Machine nebola schopná nájsť binárny kód pre danú triedu (teda súbor .class). Táto výnimka je veľmi „obľúbená&amp;quot; hlavne v prípade, keď nie je k dispozícii žiadne integrované vývojové prostredie (IDE) a sme obmedzení len na prácu s príkazovým riadkom.
Vyhľadávanie .class súborov môže spôsobiť veľký hlavybôľ, ale pri prečítaní správnej dokumentácie sa ukáže, že sa riadi pevne danými pravidlami.</description>
    </item>
    
    <item>
      <title>Jetty – webový kontajner</title>
      <link>https://novotnyr.github.io/scrolls/jetty-webovy-kontajner/</link>
      <pubDate>Mon, 03 Sep 2007 00:00:00 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/jetty-webovy-kontajner/</guid>
      <description>O Jetty Jetty je servletový a JSP kontajner, ktorý sa vyznačuje malou veľkosťou a subjektívne väčšou svižnosťou oproti klasickým kontajnerom (napr. Tomcat-u).
Posledná verzia 6.1 spĺňa všetky najnovšie štandardy špecifikácie Servlet/JSP (teda Servlet 2.5 a JSP 2.1)
Kde stiahnuť Jetty si možno stiahnuť napr. z CodeHausu, veľkosť ZIP archívu v prípade verzie 6.1 je cca 23 MB.
Rozbalený ZIP archív (66 MB) však môžeme bez problémov osekať o nepoužívané komponenty. V prípade jednoduchého testovania webaplikácií sa môžeme zbaviť súčastí ako asynchrónne IO a pod.</description>
    </item>
    
    <item>
      <title>RMI - vzdialené volanie metód</title>
      <link>https://novotnyr.github.io/scrolls/rmi-a-vzdialene-volanie-metod/</link>
      <pubDate>Fri, 24 Aug 2007 00:00:00 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/rmi-a-vzdialene-volanie-metod/</guid>
      <description>Od verzie Java 5 sa vzdialené volanie metód značne zjednodušilo. Uvedieme jednoduchý príklad servera a klienta, ktorý získa aktuálny dátum na serveri.
Základné interfejsy Predovšetkým budeme potrebovať interfejs, ktorý bude obsahovať vzdialené volateľné metódy.
package rmi2; import java.rmi.Remote; import java.rmi.RemoteException; import java.util.Date; public interface RemoteDateService extends Remote { public Date getDate() throws RemoteException; } Následne dodáme jeho implementáciu:
package rmi2; import java.rmi.RemoteException; import java.rmi.server.UnicastRemoteObject; import java.util.Date; public class RemoteDateServiceImpl extends UnicastRemoteObject implements RemoteDateService { public RemoteDateServiceImpl() throws RemoteException { super(); } public Date getDate() throws RemoteException { return new Date(); } } Trieda implementuje UnicastRemoteObject, to znamená, že pri vytvorení jej inštancie sa vykoná jej automatická registrácia v RMI registroch (teda bude automaticky pripravená na zverejnenie).</description>
    </item>
    
    <item>
      <title>RMI remoting a Spring</title>
      <link>https://novotnyr.github.io/scrolls/rmi-remoting-a-spring/</link>
      <pubDate>Tue, 24 Jul 2007 00:11:57 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/rmi-remoting-a-spring/</guid>
      <description>Spring podporuje automatické publikovanie zvoleného interfaceu v podobe RMI triedy.
Majme jednoduchý interface:
package spring.rmi; import java.util.Date; public interface DateService { public Date getDate(); } a jeho implementáciu, ktorá vracia aktuálny dátum
package spring.rmi; import java.util.Date; public class DateServiceImpl implements DateService { public Date getDate() { return new Date(); } } (:sourceend:) Všimnime si, že ani interfejs ani jeho implementácia nemajú v sebe nič špeciálne. Sú to klasické triedy, ktoré dokonca nepoužívajú nič z technológie RMI.</description>
    </item>
    
    <item>
      <title>Popoludnie s jazykom Java 2007</title>
      <link>https://novotnyr.github.io/courses/popoludnie-s-jazykom-java-2007/</link>
      <pubDate>Mon, 19 Feb 2007 12:22:54 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/courses/popoludnie-s-jazykom-java-2007/</guid>
      <description>O projekte Popoludnie s jazykom Java je neformálny ,,hands-on&amp;quot; seminár venujúci sa jazyku Java a súvisiacim technológiám pod vedením Róberta Novotného Prebieha nepravidelne v piatky od 13.00 v laboratóriu P7.
V súčasnosti beží už druhý ročník - tentokrát v pozmenenej podobe.
Program Servlety a JSP
Inštalácia servera Apache Tomcat 5.5.x na Windowse Vytvorenie a nasadenie webových aplikácií pre Tomcat Servlety a JSP - bakalárska práca Slajdy o servletoch a JSP Miniseriál S Javou na webovém serveru na Root.</description>
    </item>
    
    <item>
      <title>Vstupno-výstupné metódy v jazyku Java</title>
      <link>https://novotnyr.github.io/scrolls/vstupno-vystupne-metody-v-jazyku-java/</link>
      <pubDate>Fri, 12 Jan 2007 00:00:00 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/vstupno-vystupne-metody-v-jazyku-java/</guid>
      <description>Úvod Programovací jazyk, ktorý by neponúkal dostatočný repertoár prostriedkov na zabezpečenie vstupu a výstupu (napr. načítavanie z klávesnice, čítanie a zápis do súborov) by bol asi veľmi rýchlo odsúdený na neúspech. Veď čo už s takým programom, s ktorým nemôžete interagovať.
Java poskytuje tento repertoár v plnej miere. Na rozdiel od klasických procedurálnych jazykov sú prostriedky na zabezpečenie vstupu a výstupu reprezentované pomocou viacerých tried a ich metód (združených hlavne v balíčku java.</description>
    </item>
    
    <item>
      <title>Programovanie, algoritmy, zložitosť 2006</title>
      <link>https://novotnyr.github.io/courses/programovanie-algoritmy-zlozitost-paz1c-2006/</link>
      <pubDate>Sat, 23 Sep 2006 12:56:00 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/courses/programovanie-algoritmy-zlozitost-paz1c-2006/</guid>
      <description>Záverečný projekt – Spracovanie konfiguračných súborov Úlohou aplikácie je zabezpečiť pohodlnú prácu s konfiguračnými súbormi typu INI a XML. Aplikácia musí podporovať nasledovné činnosti:
načítanie konfiguračného súboru zo súboru (voliteľne: načítanie konfiguračného súboru z CLASSPATH, z URL)
získavanie hodnôt z jednotlivých konfiguračných kľúčov s pohodlnou automatickou konverziou medzi typmi, teda metódu na načítanie celého čísla, reálneho čísla, reťazca a booleovskej hodnoty. Aplikácia musí podporovať spôsob získania hodnoty s ošetrením situácie, keď sa daný kľúč v konfiguračnom súbore nenachádza (možnosť vrátiť nedefinovanú hodnotu alebo možnosť vrátiť užívateľom určenú implicitnú hodnotu).</description>
    </item>
    
    <item>
      <title>Dobré ráno s jazykom Java</title>
      <link>https://novotnyr.github.io/courses/dobre-rano-s-jazykom-java/</link>
      <pubDate>Wed, 20 Sep 2006 00:00:00 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/courses/dobre-rano-s-jazykom-java/</guid>
      <description>O projekte Majú o vás záujem IT firmy? Zmeškali ste jarné popoludnie s jazykom Java? V rámci predmetu UINF/PAZ1c (2+2) môžete získať (bez nároku na kredity ;-)) teoretické i praktické skúsenosti s jedným z najhorúcejších programovacích jazykov súčasnosti.
Stretnutia budú prebiehať každý týždeň v dvoch podobách: 90 minút (štvrtok o 9.00 v posluchárni P12) budé koncipovaných ako prednáška. Ďalších 90 minút bude venovaných praktickým skúsenostiam v počítačovom laboratóriu (časy sa upresnia).</description>
    </item>
    
    <item>
      <title>DB2 – receptár tipov a trikov</title>
      <link>https://novotnyr.github.io/scrolls/db2-receptar-tipov-a-trikov/</link>
      <pubDate>Sun, 11 Jun 2006 19:59:44 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/db2-receptar-tipov-a-trikov/</guid>
      <description>Katalogizacia vzdialenej DB do klienta catalog tcpip node ssj_d remote dbserver.ics.upjs.sk server 50000 catalog db slovnikd at node ssj_d SSJ_D je nazov uzla/node - lubovolny. 50000 je port sluzby. Miesto portu je mozne pouzit aj nazov sluzby - ten sa da na Windowse zistit z etc/services.
Restore databazy zo zalohy do inej databazy restore database slovnik from d:\bak\slovnikd into slovnikd Vytvaranie sekvencii v DB2 CREATE SEQUENCE vyznam_seq AS INT START WITH 160000 INCREMENT BY 1 MINVALUE 1 NO MAXVALUE NO CYCLE NO CACHE ORDER; Sekvencia mozu byt pouzita ako generator primarnych klucov.</description>
    </item>
    
    <item>
      <title>Programovanie, algoritmy, zložitosť (UINF/PAZ1b) 2006</title>
      <link>https://novotnyr.github.io/courses/programovanie-algoritmy-zlozitost-paz1b-2006/</link>
      <pubDate>Sun, 11 Jun 2006 19:59:44 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/courses/programovanie-algoritmy-zlozitost-paz1b-2006/</guid>
      <description>Uloha c. 1 (19. 4. 2006) Vytvorte unit s nazvom stats. V tomto unite budu vytvorene dalsie triedy.
Vytvorte dalsiu triedu Zaznam, ktora bude reprezentovat jednu kticu realnych cisiel. Trieda ma mat dva datove cleny, oba v private sekcii:
dlzku zaznamu (pocet clenov). pole realnych cisiel obsahujucich data (predpokladajte, ze zaznam moze obsahovat maximalne 30 poloziek). V triede vytvorte nasledovne metody, vsetky v public sekcii: sucet bez argumentov, ktora spocita sucet vsetkych hodnot.</description>
    </item>
    
    <item>
      <title>Wicket – receptár tipov a trikov</title>
      <link>https://novotnyr.github.io/scrolls/wicket-receptar-tipov-a-trikov/</link>
      <pubDate>Thu, 25 May 2006 22:47:44 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/wicket-receptar-tipov-a-trikov/</guid>
      <description>Ako vyrobit nieco ako frame v Delphi? Staci pouzit kombinaciu a k nemu vyrobit WebMarkupContainer. Naozaj netreba pouzivat Panely.
Pouzivanie setVisible Skryty komponent sa vo vyrenderovanom HTML nezobrazi. To je prirodzena vlastnost. Pre skryte panely vsak plati, ze sa vobec nenacitava im zodpovedajuci HTML popis. To sa udeje az pri prvom zobrazeni.
Modifikacia poloziek v ListView Ak sa planuju zmeny poloziek v ListView (pridavanie, uberanie), je potrebne nastavit na tomto komponente setReuseItems(true).</description>
    </item>
    
    <item>
      <title>Popoludnie s jazykom Java 2006</title>
      <link>https://novotnyr.github.io/courses/popoludnie-s-jazykom-java-2006/</link>
      <pubDate>Sun, 09 Apr 2006 12:29:02 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/courses/popoludnie-s-jazykom-java-2006/</guid>
      <description>O projekte Popoludnie s jazykom Java je neformálny „hands-on&amp;quot; seminár venujúci sa jazyku Java a súvisiacim technológiám pod vedením Róberta Novotného a Karola Bučeka. Prebieha každý utorok od 13.30 v laboratóriu P7.
Otázky E-mail: http://s.ics.upjs.sk/~novotnyr/img/email.gif, ICQ: http://s.ics.upjs.sk/~novotnyr/img/icq-arial-10.gif
Oznamy Po dvanástich stretnutiach sa skončila oficiálna časť seminára. Celý seminár dokázalo zvládnuť 5 účastníkov! Stretnutia 21. 1. 2006. Prvé stretnutie 6 účastníkov.
História Javy, inštalácia JDK, inštalácia Eclipse. Hello World. Letom svetom Eclipseom.</description>
    </item>
    
    <item>
      <title>Ako Maťko s Kubkom seržanta po Pavučine naháňali (Debian Sarge)</title>
      <link>https://novotnyr.github.io/scrolls/ako-matko-s-kubkom-serzanta-po-pavucine-nahanali-debian-sarge/</link>
      <pubDate>Sun, 19 Feb 2006 00:00:00 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/ako-matko-s-kubkom-serzanta-po-pavucine-nahanali-debian-sarge/</guid>
      <description>Inštalácia sarge-i386-netinst.iso nahodene do VMWaru. Bolo treba nastavit siet z Bridged na NAT (inak sa instalator stazoval na nepritomne DHCP) po chvilke laborovania nano /etc/apt/sources.list dovolilo pridat deb http://ftp.tuke.sk/debian stable main contrib non-free deb http://ftp.tuke.sk/debian testing main contrib non-free (`deb server typ_releaseu vetva1 vetva2&amp;hellip;} cerstvo nainstalovany serzant ma okolo 200MB. apt-get install mc (ruky) apt-get install apache2 apt-get install links2 apt-get install php4 apt-get install ssh4 (openSSH, vratane demona sshd) XServer Zakazanie prihlasovania sa rovno do Xov:</description>
    </item>
    
    <item>
      <title>Tomcat Connection Pooling</title>
      <link>https://novotnyr.github.io/scrolls/tomcat-connection-pooling/</link>
      <pubDate>Thu, 02 Feb 2006 12:43:54 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/tomcat-connection-pooling/</guid>
      <description>V nasledovnom článku popíšeme rozchodenie connection poolingu v Tomcate.
Čo je connection pooling? Connection pooling v Tomcate umožňuje vylepšenú podporu a správu pripojení (triedy implementujúce interface java.sql.Connection) v servletoch a JSP. Základné riešenie ťažkého kalibru je pri volaní príslušnej metódy servletu vytvoriť nové pripojenie a po vybavení požiadavky ho hneď zatvoriť. Žiaľ, toto riešenie je k databáze nešetrné (čo ak pripojenie nie je korektne uzavreté? čo ak počet vyžiadaných pripojení presiahne databázou povolenú hodnotu?</description>
    </item>
    
    <item>
      <title>Apache Forrest – receptár tipov a trikov</title>
      <link>https://novotnyr.github.io/scrolls/forrest-receptar-tipy-triky/</link>
      <pubDate>Thu, 02 Feb 2006 00:00:00 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/forrest-receptar-tipy-triky/</guid>
      <description>Forrest a slovenské fonty Problém [Formatting Objects](http://xml.apache.org/forrest |Apache Forrest]] je nástroj na generovanie projektovej dokumentácie v rôznych formátoch zo vstupných súborov vo formáte (implicitne) DocBook. Najčastejším použitím je výstup vo forme webových stránok alebo PDFka. Príkladom siete vytvorenej Forrestom sú stránky k mojej [[http://s.ics.upjs.sk/~novotnyr/dp |diplomke]]. Jednou záludnosťou pri generovaní PDFiek je notorický problém slovenčiny - diakritika. V štandardnej distribúcii a konfigurácii nepodporuje Forrest pri generovaní PDFiek diakritiku - namiesto nej sa zobrazia mriežky #.</description>
    </item>
    
    <item>
      <title>Maven – receptár, tipy a triky</title>
      <link>https://novotnyr.github.io/scrolls/maven-receptar-tipy-triky/</link>
      <pubDate>Mon, 09 Jan 2006 00:00:00 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/maven-receptar-tipy-triky/</guid>
      <description>Generovanie projektovych stranok pomocou Mavenu 1 Nastavime maven.docs.outputencoding=utf-8 v project.properties. Inak sa dockame dokumentacie v iso-8859-1, pripadne otaznikov vo vygenerovanych dokumentoch
Stiahneme plugin sdocbook maven plugin:download -DgroupId=maven-plugins -DartifactId=maven-sdocbook-plugin -Dversion=1.4.1 Do maven.xml v projektovom adresari pridame / vytvorime &amp;lt;project xmlns:j=&amp;#34;jelly:core&amp;#34; xmlns:ant=&amp;#34;jelly:ant&amp;#34; xmlns:util=&amp;#34;jelly:util&amp;#34; xmlns:maven=&amp;#34;jelly:maven&amp;#34;&amp;gt; &amp;lt;goal name=&amp;#34;docbook2xdoc&amp;#34;&amp;gt; &amp;lt;maven:get var=&amp;#34;maven.sdocbook.generated.html&amp;#34; plugin=&amp;#34;maven-sdocbook-plugin&amp;#34; property=&amp;#34;maven.sdocbook.generated.html&amp;#34;/&amp;gt; &amp;lt;mkdir dir=&amp;#34;${maven.gen.docs}/docbook2xdoc&amp;#34;/&amp;gt; &amp;lt;j:set var=&amp;#34;maven.html2xdoc.dir.bak&amp;#34; value=&amp;#34;${maven.html2xdoc.dir}&amp;#34;/&amp;gt; &amp;lt;j:set var=&amp;#34;maven.gen.docs.bak&amp;#34; value=&amp;#34;${maven.gen.docs}&amp;#34;/&amp;gt; &amp;lt;j:set var=&amp;#34;maven.html2xdoc.dir&amp;#34; value=&amp;#34;${maven.sdocbook.generated.html}&amp;#34;/&amp;gt; &amp;lt;j:set var=&amp;#34;maven.gen.docs&amp;#34; value=&amp;#34;${maven.gen.docs}&amp;#34;/&amp;gt; &amp;lt;attainGoal name=&amp;#34;html2xdoc:transform&amp;#34;/&amp;gt; &amp;lt;j:set var=&amp;#34;maven.html2xdoc.dir&amp;#34; value=&amp;#34;${maven.html2xdoc.dir.bak}&amp;#34;/&amp;gt; &amp;lt;j:set var=&amp;#34;maven.gen.docs&amp;#34; value=&amp;#34;${maven.gen.docs.bak}&amp;#34;/&amp;gt; &amp;lt;/goal&amp;gt; &amp;lt;/project&amp;gt; Generujeme taskom maven clean sdocbook:generate-html docbook2xdoc xdoc` Kopírovanie konfigurákov v prípade viacerých profilov &amp;lt;profiles&amp;gt; &amp;lt;profile&amp;gt; &amp;lt;id&amp;gt;production&amp;lt;/id&amp;gt; &amp;lt;build&amp;gt; &amp;lt;plugins&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;artifactId&amp;gt;maven-antrun-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;executions&amp;gt; &amp;lt;execution&amp;gt; &amp;lt;phase&amp;gt;test&amp;lt;/phase&amp;gt; &amp;lt;goals&amp;gt; &amp;lt;goal&amp;gt;run&amp;lt;/goal&amp;gt; &amp;lt;/goals&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;tasks&amp;gt; &amp;lt;delete file=&amp;#34;${project.</description>
    </item>
    
    <item>
      <title>nLite Status Report</title>
      <link>https://novotnyr.github.io/scrolls/nlite-status-report.markdown/</link>
      <pubDate>Mon, 16 May 2005 09:10:43 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/nlite-status-report.markdown/</guid>
      <description>nLite aktualizoval Windows XP SP1 slipstreamnutim Service Packu 2. Nasledovne bol zruseny IE (komponenty IE Core, aj IE additional). Ako bonusova volba bol zvoleny klasicky vzhlad instalatora. nastalo instalovanie vo VMWare. Instalacia prebehla OK, akurat som bol ochudobneny o pestre modre pozadie pri instalatore (jednoducho Win2K style) Okna sa otvorili. V klasickom ,,ye olde&amp;quot; vzhlade, a la Windows 2000. Po prestaveni plochy na ,,klasicky vzhlad&amp;quot; mi kupodivu chyba ikonka IE.</description>
    </item>
    
    <item>
      <title>Jednoduchý príklad použitia Hibernate</title>
      <link>https://novotnyr.github.io/scrolls/jednoduchy-priklad-pouzitia-hibernate/</link>
      <pubDate>Sun, 17 Apr 2005 17:26:10 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/jednoduchy-priklad-pouzitia-hibernate/</guid>
      <description>Úvod Hibernate (http://www.hibernate.org) je nástroj podporujúci objektovú perzistenciu &amp;ndash; v preklade: umožňuje ukladať objekty do databázy a následne ich z nej vyberať (často sa možno stretnúť so pojmom ORM &amp;ndash; Object Relational Mapping). Výhodou je jeho ľahké používanie, stabilita a rozšírenosť.
Príklad Uvažujme niekoľko jednoduchých tried, ktoré sa zaoberajú mačkami. Majme koncept mačky: mačka má meno a deti. Teda môžeme ju reprezentovať triedou Cat.
package catology; import java.util.HashSet; import java.util.Set; public class Cat { private String name; public String getName() { return name; } public void setName(String name) { this.</description>
    </item>
    
    <item>
      <title>Jednoduchý príklad použitia Velocity</title>
      <link>https://novotnyr.github.io/scrolls/velocity-jednoduchy-priklad-pouzitia/</link>
      <pubDate>Sun, 17 Apr 2005 09:45:12 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/velocity-jednoduchy-priklad-pouzitia/</guid>
      <description>Podľa prehľadu na stránkach tohto projektu je Velocity &amp;lsquo;&amp;lsquo;šablónový „stroj&amp;quot; založený na Jave. Umožňuje využívať jednoduchý, ale zato mocný jazyk&amp;rsquo;&amp;rsquo; na využívanie objektov definovaných v javovskom kóde.
Šablóny môžu byť používané na generovanie HTML stránok, hromadnej korešpondencie alebo na ľubovoľnú podobnú činnosť.
Príkladom šablóny je napr. súbor knights.vm
Rytieri okrúhleho stola sa dnes zišli v počte $knightsList.size(). Tu je ich presný zoznam: #foreach( $knight in $knightList ) $knight.name #end V šablóne sa používajú direktívy (začínajúce na #), možno využívať premenné (začínajúce $), s premennými možno vykonávať rôzne operácie (bodková notácia ako v Jave).</description>
    </item>
    
    <item>
      <title>XUL – Použitie notifikačného okienka v rozšírení</title>
      <link>https://novotnyr.github.io/scrolls/xul-alertlistener.markdown/</link>
      <pubDate>Thu, 17 Mar 2005 19:21:56 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/xul-alertlistener.markdown/</guid>
      <description>Niektoré rozšírenia používajú úhľadné notifikačné okienko &amp;ndash; napr. Download Manager vyhodí takéto okienko, ak boli dokončené všetky sťahovania, WeatherFox ho tiež využíva na ohlásenie aktuálneho počasia pri štarte Firefoxu.
(pozn: vraj táto funkcionalita je dostupná len na Windowse&amp;hellip;)
Toto úhľadné okienko možno vyvolať nasledovne.
//ziskame komponent pre sluzbu AlertService var alerts = Components.classes[&amp;#34;@mozilla.org/alerts-service;1&amp;#34;].getService(Components.interfaces.nsIAlertsService); Zavolame metodu na vyvolanie okienka. Parametre su nasledovne
prvy parameter udava adresu obrazka zobrazenenho v okienku druhy parameter udava titulok okienka treti parameter udava hlavny text v notifikacii stvrty booleovsky parameter udava, ci je text zobrazeny ako klikatelny odkaz piaty zahadny parameter ma nieco do cinenia s cookie (nejak som nenasiel blizsie info) siesty parameter udava instanciu objektu, ktory bude nacuvat udalostiam, ktore sa vykonaju pri kliknuti na odkaz v notifikacii alerts.</description>
    </item>
    
    <item>
      <title>XUL – EcmaScript</title>
      <link>https://novotnyr.github.io/scrolls/xul-ecmascript/</link>
      <pubDate>Wed, 16 Mar 2005 18:04:46 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/xul-ecmascript/</guid>
      <description>EcmaScript je vlastne normovanou verziou jazyka, ktory vznikol z JavaScriptu. Mozilla podporuje EcmaScript verzie 3.
Objektový model v EcmaScripte (262). V EcmaScripte neexistuje koncept triedy.
Tvorba novych instancii Explicitne vytvaranie objektov var person = new Object; person.firstName = &amp;#34;John&amp;#34;; person.secondName = &amp;#34;Doe&amp;#34;; „Inline&amp;quot; ci pristup cez literal var obj = { foreground:&amp;#34;red&amp;#34;, background:&amp;#34;blue&amp;#34; } Vsimnime si syntax:
datove cleny su uvedene bez var hodnota sa im priraduje cez dvojbodku (nie cez „rovna sa&amp;quot;) Prototypy v ulohe tried Na vytvaranie kvazi-tried sa pouzivaju „prototypy&amp;quot;.</description>
    </item>
    
    <item>
      <title>XUL – Vytvorenie nového rozšírenia pre Firefox</title>
      <link>https://novotnyr.github.io/scrolls/xul-vytvorenie-noveho-rozsirenia-pre-firefox/</link>
      <pubDate>Thu, 17 Feb 2005 19:30:01 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/xul-vytvorenie-noveho-rozsirenia-pre-firefox/</guid>
      <description>(pozn: viacmenej okopírované z tutoriálu na XULPlanet.com)
Úvod Na prípravu nového rozšírenia potrebujeme
adresárovú štruktúru upraviť contents.rdf upraviť installed-chrome.txt Adresárová štruktúra Súbory rozšírenia by sa mali nachádzať v úhľadnom JARe, ale pri ladení ich nechceme do archívu neustále zabaľovať a odbaľovať. Môžeme si založiť adresár v adresári chrome, v prípade Firefoxu napr. c:\Program Files\Mozilla Firefox\chrome. Nech sa naša aplikácia volá „textedit&amp;quot;. Založíme teda nasledovnú štruktúru
c:\Program Files\Mozilla Firefox\chrome | |-textedit |-content |-skin |-locale Adresáre skin a locale zatiaľ ponecháme prázdne.</description>
    </item>
    
    <item>
      <title>Xerces – Java XML Parser Primer</title>
      <link>https://novotnyr.github.io/scrolls/xerces-primer/</link>
      <pubDate>Tue, 01 Feb 2005 11:03:02 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/xerces-primer/</guid>
      <description>DOM v Xercesovi Na salaši pod Veprom TramtáriaDOM Budú miestne preteky V hode oštiepkom — L&amp;amp;S&amp;amp;F &amp;ndash; Majstrovstvá
DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance(); factory.setValidating(true); factory.setIgnoringElementContentWhitespace(true); DocumentBuilder builder = factory.newDocumentBuilder(); // Method input for entering String included Document doc = builder.parse(filename); // DOM tree done - getting the root element Element root = doc.getDocumentElement(); SAX Štartér import org.xml.sax.XMLReader; import org.xml.sax.ContentHandler; import java.io.IOException; import org.xml.sax.SAXException; public class SAXParserDemo { public void performDemo(String uri) { System.</description>
    </item>
    
    <item>
      <title>Inštalácia LaTeX2HTML vo Windows</title>
      <link>https://novotnyr.github.io/scrolls/latex2-html-na-windows-32/</link>
      <pubDate>Wed, 24 Nov 2004 16:08:05 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/latex2-html-na-windows-32/</guid>
      <description>LaTeX2HTML-2002-2-1, Windows XP SP1, MikTeX 2.4.1461
Na pripravu potrebujeme:
LaTeX2HTML
Perl (napr. ActiveState Perl)
netpbm &amp;ndash; binarky (pouzita verzia 10.8.14)
Odbalime LaTeX2HTML do docasneho adresara
Nainstalujeme netpbm
Zeditujeme prefs.pm v adresari, kam sa odbalil LaTeX2HTML.
$prefs{&#39;PREFIX&#39;} udava cestu, kam sa to nainstaluje $prefs{&#39;EXTRAPATH&#39;}] treba nastavit na cestu k nainstalovanemu ghostscriptu a netpbm. Pravdepodobne kvoli chybe v parsovani cesty (asi vadia dvojbodky) mi fungovalo len toto riesenie &amp;ndash; netpbm, ghostscript na rovnakom disku ako instalacky LaTeX2HTML, cesty bez uvedenia pismena jednotky: $prefs{&#39;EXTRAPATH&#39;} = &#39;\\Utility\\Alladin\\GS\\gs7.</description>
    </item>
    
    <item>
      <title>Jabo – JavaDoc Browser</title>
      <link>https://novotnyr.github.io/scrolls/jabo-javadoc-browser/</link>
      <pubDate>Mon, 15 Nov 2004 19:14:14 +0100</pubDate>
      
      <guid>https://novotnyr.github.io/scrolls/jabo-javadoc-browser/</guid>
      <description>Javadoc Browser ma nahradit pekny prehliadac v Gel-i, ktory mi v Eclipse chyba (alebo som nenasiel jeho ekvivalent).
Pouzitie Do textoveho chlievika zadajte nazov triedy (alebo jeho cast) a zobrazia sa prislusne triedy. (pozor, case-sensitive!)
Javadoc sa taha z online zdrojov. Zatial.
http://s.ics.upjs.sk/~novotnyr/home/java/jabo.
Source http://s.ics.upjs.sk/~novotnyr/home/java/jabo/jabo-2004-11-15.zip
Changelog Hlavny skript na generovanie suborov s nazvami tried uz nie je objektovy&amp;hellip; Varovanie ministerstva psychickeho zdravia: zdrojaky su v PHP a tvaria sa objektovo a nemaju komentare&amp;hellip;</description>
    </item>
    
  </channel>
</rss>
